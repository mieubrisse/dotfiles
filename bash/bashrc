# Used for debugging slow .bashrc load times.. 
echo "Started loading .bashrc..."
_bashrc_start_time="$(gdate +%s%3N)"
_last_perf_checkpoint="${_bashrc_start_time}"

# Whether to print perf checkpoint information for debugging slow .bashrc loads
_PRINT_PERF_CHECKPOINTS=false

# This is used for debugging a slow .bashrc
# To use, drop `run_perf_checkpoint "Some checkpoint name"` in the code
function run_perf_checkpoint() {
    if "${_PRINT_PERF_CHECKPOINTS}"; then
        checkpoint_name="${1}"
        _now="$(gdate +%s%3N)"
        echo "Checkpoint '${checkpoint_name}' ($((_now - _last_perf_checkpoint))ms since last checkpoint)"
        _last_perf_checkpoint="${_now}"
    fi
}
    
# ------------------------------------- Bash Completion -----------------------------------
# # NOTE: This version of Bash completion, which adds completion to allll the commands, is very slow (~250ms)
# function add_bash_completion() {
#     # Add tab completion for many Bash commands
#     run_perf_checkpoint "After 'brew --prefix' and before sourcing Bash completion"
#     if which brew &> /dev/null && [ -r "${_brew_prefix}/etc/profile.d/bash_completion.sh" ]; then
#             # Ensure existing Homebrew v1 completions continue to work
#             export BASH_COMPLETION_COMPAT_DIR="${_brew_prefix}/etc/bash_completion.d";
#             source "${_brew_prefix}/etc/profile.d/bash_completion.sh";
#     elif [ -f /etc/bash_completion ]; then
#             source /etc/bash_completion;
#     fi;
# }

# I only really care about Git completion, so use that
function add_bash_completion() {
    # NOTE: this should be "source $(brew --prefix)/etc/...." but we hardcode the Homebrew prefix to avoid a slow subhsell call
    source /usr/local/etc/bash_completion.d/git-completion.bash   
}
# ----------------------------------- End Bash Completion -----------------------------------

export EDITOR="vim"

# Make bash and all readline programs operate in vi mode
set -o vi

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Shell Options
shopt -s cdspell # Automatically fix 'cd' spelling mistakes

# Make completion better
bind "set completion-ignore-case on"
bind "set show-all-if-ambiguous on"

# ---- History -------------------------------------------------------------------------
shopt -s cmdhist # Combine multi-line entries into one history line

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth:erasedups

# append to the history file, don't overwrite it
shopt -s histappend

# Give option to modify history commands before executing
shopt -s histverify

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=10000

# Add timestamps to history file
HISTTIMEFORMAT='%F %T '

# Don't log calls to the boring commands
HISTIGNORE='ls:bg:fg:history'
# ---- /History -------------------------------------------------------------------------



# Define an array that config blocks can append to if they want something on the path
PATH_ADDITIONS=()


run_perf_checkpoint "Before Pyenv"

# ---- PyEnv -------------------------------------------------------------------------
export PYENV_ROOT="$HOME/.pyenv"

# Do rehash in background to speed up startup
eval "$(pyenv init - --no-rehash)"
(pyenv rehash &) 2> /dev/null

eval "$(pyenv virtualenv-init -)"
PATH_ADDITIONS+=("$PYENV_ROOT/bin")

run_perf_checkpoint "After Pyenv; before Jenv"

# ---- Jenv --------------------------------------------------------------------------
# Do rehash in background to speed up startup
eval "$(jenv init - --no-rehash)"
(jenv rehash &) 2> /dev/null

# Annoyingly, jenv doesn't set JAVA_HOME automatically so we have to do it manually
function __jenv_set_java_home() {
    export JAVA_HOME="$HOME/.jenv/versions/$(jenv version | awk '{ print $1}')"
}
__jenv_set_java_home

run_perf_checkpoint "After Jenv"

# ------------ Golang ---------------------------------------------------------------
export GOPATH="${HOME}/go"
PATH_ADDITIONS+=("/usr/local/opt/go@1.13/bin")

# ----------- Bash Prompt -----------------------------------------------------------

# # Helper function to get foreground and background colors
# # NOTE: Unused because it slows down the prompt considerably
# function __get_color() {
#     local place="${1}"
#     local color="${2}"
#
#     if [ "${place}" == "fore" ]; then
#         local val="38"
#     else
#         local val="48"
#     fi
#
#     echo '\[\e['"${val}"';5;'"${color}"'m\]'
# }

# Renders the working directory, highlighting the current Git directory (if any)
# $1 - Exit code of the last command
# $2 - Color to use when the last command was successful
# $3 - Color to use when the last command failed
# $4 - Color to use for the root Git directory if the last command was successful
# $5 - Color to use for the root Git directory if the last command failed
# retval - String that can be added to the prompt
function __render_working_dir() {
    local last_exit_code="${1}"
    local success_color="${2}"
    local failure_color="${3}"
    local success_gitdir_color="${4}"
    local failure_gitdir_color="${5}"

    # TODO Debugging
    # echo "${success_color}$PWD"
    # return 0

    local git_root_dirpath="$(git rev-parse --show-toplevel 2>/dev/null)"
    local find_gitdir_retcode="${?}"

    local return_str=""
    if [ ${last_exit_code} -eq 0 ]; then
        return_str+="${success_color}"
    else
        return_str+="${failure_color}"
    fi

    # We're inside a Git directory, so we'll try to highlight it on the path
    if [ ${find_gitdir_retcode} -eq 0 ] && [ -n "${git_root_dirpath}" ] && [ "${PWD##${git_root_dirpath}}" != "${PWD}" ]; then
        git_root_parent_dirpath="$(dirname "${git_root_dirpath}")"
        return_str+="${git_root_parent_dirpath}"
        # If necessary, add back the slash that got stripped by using "dirname"
        if [ "${git_root_dirpath}" != "/" ]; then
            return_str+="/"
        fi

        git_root_dirname="${git_root_dirpath##*/}"
        if [ ${last_exit_code} -eq 0 ]; then
            return_str+="${success_gitdir_color}${git_root_dirname}"
            return_str+="${success_color}${PWD##${git_root_dirpath}}"
        else
            return_str+="${failure_gitdir_color}${git_root_dirname}"
            return_str+="${failure_color}${PWD##${git_root_dirpath}}"
        fi
    else
        return_str+="${PWD}"
    fi

    # For speed, instead of echo'ing this for subshell capture later, we'll just set a variable
    retval="${return_str//${HOME}/~}"
}

# Generates a string displaying Git information that can be added to the prompt 
# retval - String to add to prompt
function __render_git_prompt() {

    # Prompt colors
    # TODO Move control of these colors back to .bashrc
    local RESET_COLOR='\[\e[0m\]'
    local RESET_BOLD='\[\e[21m\]'
    # BOLD="\[$(tput bold)\]"
    local YELLOW_FORE='\[\e[38;5;226m\]'
    # DARKISH_GREY_BACK='\[\e[48;5;236m\]'
    local VERY_DARK_GREY_BACK='\[\e[48;5;235m\]'
    local GREEN_FORE='\[\e[38;5;28m\]'
    # GREEN_FORE='\[\e[38;5;2m\]'
    local RED_FORE='\[\e[38;5;124m\]'
    local ELECTRIC_PURPLE_FORE='\[\e[38;5;129m\]'

    local no_changes_branch_color="${YELLOW_FORE}"
    local uncommitted_changes_branch_color="${ELECTRIC_PURPLE_FORE}"
    local local_color="${ELECTRIC_PURPLE_FORE}"
    local ahead_color="${GREEN_FORE}"
    local behind_color="${RED_FORE}"

    local git_status

    # Interesting note: we can't define the 'local' here or the retcode gets set to the 'local' command's, which is always 0
    git_status="$( LC_ALL=C git status --porcelain --branch 2>/dev/null )"
    retcode="${?}"

    # If we couldn't get Git status, exit now
    if [ ${retcode} -ne 0 ]; then 
        retval=""
        return 0
    fi

    # Split the branch line of the status into "local branch" and "remote"
    local raw_branch_line="$(echo "${git_status}" | head -n 1)"
    local branch_line="${raw_branch_line/\.\.\./^}"
    IFS="^" read -ra branch_fields <<< "${branch_line/\#\# }"
    local branch="${branch_fields[0]}"

    # "remote" here means how many commits ahead/behind the branch is in relation to a remote repo
    local remote=""

    # # TODO I'm not actually interested in tracking this right now, but maybe one day...
    # # "upstream" here means the name of the branch on the remote tracking our branch
    # upstream=""

    local num_ahead=""
    local num_behind=""

    # We haven't added any remotes yet
    if [[ "$branch" == *"Initial commit on"* ]]; then
        IFS=" " read -ra fields <<< "$branch"
        branch="${fields[3]}"
        remote="_NO_REMOTE_TRACKING_"
    # Case of a tag or a commit hash checked out
    elif [[ "$branch" == *"no branch"* ]]; then
        local tag=$( git describe --tags --exact-match 2>/dev/null )
        if [[ -n "$tag" ]]; then
            branch="$tag"
        else
            branch="$( git rev-parse --short HEAD )"
        fi
    # All other cases (i.e. we can diff against a remote to find ahead/behind)
    else
        # We have a remote, but haven't pushed the branch we're on (no upstream)
        if [[ "${#branch_fields[@]}" -eq 1 ]]; then
            remote="_NO_REMOTE_TRACKING_"
        # We're on a normal branch that can be compared against the remote tracking branch
        else
            IFS="[,]" read -ra remote_fields <<< "${branch_fields[1]}"
            # upstream="${remote_fields[0]}"

            # Calculate ahead/behind-ness
            for remote_field in "${remote_fields[@]}"; do
                if [[ "$remote_field" == *ahead* ]]; then
                    num_ahead=${remote_field:6}
                fi
                if [[ "$remote_field" == *behind* ]]; then
                    num_behind=${remote_field:7}
                    num_behind="${num_behind# }"
                fi
            done
        fi
    fi

    local returnstr=" ${no_changes_branch_color}("
    if git diff --quiet && git diff --cached --quiet; then
        returnstr+="${no_changes_branch_color}"
    else
        returnstr+="${uncommitted_changes_branch_color}"
    fi
    returnstr+="${branch}"
    if [ "${remote}" == "_NO_REMOTE_TRACKING_" ]; then
        returnstr+="${local_color} L"
    else
        if [ -n "${num_ahead}" ]; then
            # returnstr+="${BOLD}${ahead_color}+${num_ahead}${RESET_BOLD}"
            returnstr+="${ahead_color}+${num_ahead}"
        fi
        if [ -n "${num_behind}" ]; then
            returnstr+="${BOLD}${behind_color}-${num_behind}${RESET_BOLD}"
        fi
    fi
    returnstr+="${no_changes_branch_color})"

    # For speed, instead of echo'ing this for subshell capture later, we'll just set a variable
    retval="${returnstr}"
}

# On changing directory, ls and git fetch in background if git directory
# NOTE: This prompt is starting to get a bit unwieldy (0.035s outside a Git directory, 0.05-0.1s inside) so maybe need to scale back
# As a comparison, before we added the "highlight Git directory in the path", the prompt took about 0.04s inside a Git directory and
#  0.03 outside)
function __prompt_command() {
    local LAST_EXIT_CODE="${?}"

    # Regular ASCII colors
    # NOTE: The wrapping \[ and \] are necessary so Bash can  correctly calculate the size
    #  of the prompt:
    # https://wiki.archlinux.org/index.php/Bash/Prompt_customization#Terminfo_escape_sequences
    local RESET_COLOR="\[$(tput sgr0)\]"
    local BOLD="\[$(tput bold)\]"

    # Sexy 256-color colors
    # local SXY_DIR_FORE='\[\e[38;5;94m\]'
    # local LIGHT_GREY_BLUE=110
    local light_grey=243
    local dark_grey=236
    local very_dark_grey=235
    local very2_dark_grey=234
    local red=124
    local dark_red=88
    # local green=76
    local algae_green=76
    local orange=214
    local brightish_red=160
    local grey_blue=110
    local sky_blue=117
    # local off_white=256
    local white=255

    # local timestamp_color="$(__get_color fore ${light_grey})"
    local timestamp_color="\[\e[38;5;${light_grey}m\]"

    # Change the color of the command text based on which machine I'm working on - personal or work
    if [ "${MACHINE_CONTEXT}" == "WORK" ]; then
        local command_color="${BOLD}\[\e[38;5;${algae_green}m\]"
    elif [ "${MACHINE_CONTEXT}" == "PERSONAL" ]; then
        local command_color="${BOLD}\[\e[38;5;${orange}m\]"
    else
        local command_color="${BOLD}\[\e[38;5;${sky_blue}m\]"
    fi



    # local dir_color="${BOLD}$(__get_color back "${very_dark_grey}")"
    # if [ ${LAST_EXIT_CODE} -ne 0 ]; then
    #     dir_color+="$(__get_color fore "${red}")"
    # fi

    local background_color="\[\e[48;5;${very_dark_grey}m\]"
    local success_dir_color="\[\e[38;5;${white}m\]"
    local failure_dir_color="\[\e[38;5;${red}m\]"
    local success_gitdir_color="\[\e[38;5;${grey_blue}m\]"
    local failure_gitdir_color="\[\e[38;5;${brightish_red}m\]"

    # Setup prompt background
    PS1="${RESET_COLOR}${background_color}"

    # Add timestamp
    PS1+="${timestamp_color} $(date +%H:%M:%S) "

    # Add working dir
    PS1+="${BOLD}"
    __render_working_dir "${LAST_EXIT_CODE}" "${success_dir_color}" "${failure_dir_color}" "${success_gitdir_color}" "${failure_gitdir_color}"
    PS1+="${retval}"

    # Add Git branch info
    __render_git_prompt
    PS1+="${retval}"

    # Clear prompt background & color command text
    PS1+=" "
    PS1+="${RESET_COLOR} ${command_color}"

    if [ "${__new_wd:=$PWD}" != "${PWD}" ]; then
        ls
        [ -d ".git" ] && command -v git >/dev/null 2>&1 && ( git fetch --prune >/dev/null 2>&1 >/dev/null & )

        # Commenting out because this randomly became ultra-slow
        # __jenv_set_java_home
    fi
    __new_wd=$PWD
}
PROMPT_COMMAND=__prompt_command

# This is a hacky and awesome thing that allows me to change my command color text but not the output. See:
# http://unix.stackexchange.com/questions/198723/change-color-of-input-text-not-output
trap "echo -ne \"$(tput sgr0)\"" DEBUG

run_perf_checkpoint "Before 'brew --prefix'"
_brew_prefix="$(brew --prefix)"
add_bash_completion
run_perf_checkpoint "After sourcing Bash completion"

# Now, add all the additions that the above code specified
for PATH_TO_ADD in "${PATH_ADDITIONS[@]}"; do
    PATH="$PATH:$PATH_TO_ADD"
done



# NOTE: All these custom scripts should be sourced AFTER everything else, so they can depend on things
# e.g. bash_aliases depends on bash_completion
# There may be a better way to do these sorts of Bash "dependencies"

run_perf_checkpoint "Before Bash additions"

# Custom bash additions
if [ -f ~/.bash_additions ]; then
  source ~/.bash_additions
fi

run_perf_checkpoint "After Bash additions and before Bash aliases"

# Alias definitions
if [ -f ~/.bash_aliases ]; then
    source ~/.bash_aliases
fi

run_perf_checkpoint "After Bash aliases and before Bash local"

# Machine-specific additions
if [ -f ~/.bash_local ]; then
    source ~/.bash_local
fi

run_perf_checkpoint "Finished loading .bashrc"
echo "$(($(gdate +%s%3N) - _bashrc_start_time))ms to load entire .bashrc"

# Always ls whenever we create a new tab
ls
