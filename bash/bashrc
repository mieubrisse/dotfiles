# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth:erasedups

# append to the history file, don't overwrite it
shopt -s histappend

# Give option to modify history commands before executing
shopt -s histverify

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=10000

# Add timestamps to history file
HISTTIMEFORMAT='%F %T '

# Don't log calls to the boring commands
HISTIGNORE='ls:bg:fg:history'

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Make bash and all readline programs operate in vi mode
set -o vi

# Shell Options
shopt -s cdspell # Automatically fix 'cd' spelling mistakes
shopt -s autocd # Using 'cd' is so passe
shopt -s cmdhist # Combine multi-line entries into one history line

# Helper function to get foreground and background colors
function __get_color() {
    local place="${1}"
    local color="${2}"

    if [ "${place}" == "fore" ]; then
        local val="38"
    else
        local val="48"
    fi

    echo '\[\e['"${val}"';5;'"${color}"'m\]'
}

# On changing directory, ls and git fetch in background if git directory
function __prompt_command() {
    local LAST_EXIT_CODE="${?}"

    # Regular ASCII colors
    local RESET_COLOR='\[\e[0m\]'
    local BOLD="$(tput bold)"
    # local RED='\[\e[0;31m\]'
    # local GREEN='\[\e[0;32m\]'
    # local PURPLE='\[\e[0;35m\]'
    # local BRIGHT_RED='\[\e[1;31m\]'
    # local BRIGHT_GREEN='\[\e[1;32m\]'
    # local BRIGHT_YELLOW='\[\e[1;33m\]'
    # local BRIGHT_BLUE='\[\e[1;34m\]'
    # local BRIGHT_PURPLE='\[\e[1;35m\]'
    # local DARK_GREY='\[\e[1;30m\]'
    # local BLACK_FORE_LIGHT_GREY_BACK='\[\e[48;5;0;38;5;254m\]'
    # local INVERTED_COLOR='\[\e[7m\]'
    # local DARK_GREY_BACK='\[\e[1;30m\]'

    # Sexy 256-color colors
    # local SXY_DIR_FORE='\[\e[38;5;94m\]'
    # local LIGHT_GREY_BLUE=110
    local light_grey=243
    local very_dark_grey=235
    local very2_dark_grey=234
    local red=124
    local dark_red=88
    local green=76

    local timestamp_color="$(__get_color back ${very2_dark_grey})$(__get_color fore ${light_grey})"
    # local command_color="${BOLD}$(__get_color fore ${LIGHT_GREY_BLUE})"
    local command_color="${BOLD}$(__get_color fore ${green})"

    local dir_color="${BOLD}$(__get_color back "${very_dark_grey}")"
    if [ ${LAST_EXIT_CODE} -ne 0 ]; then
        dir_color+="$(__get_color fore "${red}")"
    fi

    PS1="${RESET_COLOR}"
    PS1="${timestamp_color} $(date +%H:%M:%S) ${RESET_COLOR}"
    PS1+="${dir_color} \w ${RESET_COLOR}"
    PS1+="$(bash ~/.bash_utils/git-prompt-addition.sh)"
    PS1+="${RESET_COLOR} ${command_color}"

    if [[ ${__new_wd:=$PWD} != $PWD ]]; then
        ls
        [ -d ".git" ] && command -v git >/dev/null 2>&1 && ( git fetch --prune >/dev/null 2>&1 >/dev/null & )
    fi
    __new_wd=$PWD
}
PROMPT_COMMAND=__prompt_command

# This is a hacky and awesome thing that allows me to change my command color text but not the output. See:
# http://unix.stackexchange.com/questions/198723/change-color-of-input-text-not-output
trap 'echo -ne "\e[0m"' DEBUG

export EDITOR="vim"

# Make completion better
bind "set completion-ignore-case on"
bind "set show-all-if-ambiguous on"

# Set all additions to PATH
PATH_ADDITIONS[0]=$HOME/.rvm/bin    # RVM to PATH for scripting
for PATH_TO_ADD in "${PATH_ADDITIONS[@]}"; do
    PATH="$PATH:$PATH_TO_ADD"
done

# Source RVM scripts
if [[ -s "$HOME/.rvm/scripts/rvm" ]] ; then
    source ~/.rvm/scripts/rvm
fi

# Custom bash additions
if [ -f ~/.bash_additions ]; then
  source ~/.bash_additions
fi

# Alias definitions
if [ -f ~/.bash_aliases ]; then
    source ~/.bash_aliases
fi

# Mac-specific additions
if [ -f ~/.bash_mac ]; then
    source ~/.bash_mac
fi

# Machine-specific additions
if [ -f ~/.bash_local ]; then
    source ~/.bash_local
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    source /etc/bash_completion
fi
