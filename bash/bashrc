# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth:erasedups

# append to the history file, don't overwrite it
shopt -s histappend

# Give option to modify history commands before executing
shopt -s histverify

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=10000

# Add timestamps to history file
HISTTIMEFORMAT='%F %T '

# Don't log calls to the boring commands
HISTIGNORE='ls:bg:fg:history'

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Make bash and all readline programs operate in vi mode
set -o vi

# Shell Options
shopt -s cdspell # Automatically fix 'cd' spelling mistakes
shopt -s autocd # Using 'cd' is so passe
shopt -s cmdhist # Combine multi-line entries into one history line

# Helper function to get foreground and background colors
function __get_color() {
    local place="${1}"
    local color="${2}"

    if [ "${place}" == "fore" ]; then
        local val="38"
    else
        local val="48"
    fi

    echo '\[\e['"${val}"';5;'"${color}"'m\]'
}

# Renders the working directory, highlighting the current Git directory (if any)
# $1 - Exit code of the last command
# $2 - Color to use when the last command was successful
# $3 - Color to use when the last command failed
# $4 - Color to use for the root Git directory if the last command was successful
# $5 - Color to use for the root Git directory if the last command failed
function __render_working_dir() {
    local last_exit_code="${1}"
    local success_color="${2}"
    local failure_color="${3}"
    local success_gitdir_color="${4}"
    local failure_gitdir_color="${5}"

    # TODO Debugging
    # echo "${success_color}$PWD"
    # return 0

    local git_root_dirpath="$(git rev-parse --show-toplevel 2>/dev/null)"
    local find_gitdir_retcode="${?}"

    local return_str=""
    if [ ${last_exit_code} -eq 0 ]; then
        return_str+="${success_color}"
    else
        return_str+="${failure_color}"
    fi

    # We're inside a Git directory, so we'll try to highlight it on the path
    if [ ${find_gitdir_retcode} -eq 0 ] && [ -n "${git_root_dirpath}" ] && [ "${PWD##${git_root_dirpath}}" != "${PWD}" ]; then
        git_root_parent_dirpath="$(dirname "${git_root_dirpath}")"
        return_str+="${git_root_parent_dirpath}"
        # If necessary, add back the slash that got stripped by using "dirname"
        if [ "${git_root_dirpath}" != "/" ]; then
            return_str+="/"
        fi

        git_root_dirname="${git_root_dirpath##*/}"
        if [ ${last_exit_code} -eq 0 ]; then
            return_str+="${success_gitdir_color}${git_root_dirname}"
            return_str+="${success_color}${PWD##${git_root_dirpath}}"
        else
            return_str+="${failure_gitdir_color}${git_root_dirname}"
            return_str+="${failure_color}${PWD##${git_root_dirpath}}"
        fi
    else
        return_str+="${PWD}"
    fi

    echo "${return_str//${HOME}/~}"
}

# On changing directory, ls and git fetch in background if git directory
# NOTE: This prompt is starting to get a bit unwieldy (0.035s outside a Git directory, 0.05-0.1s inside) so maybe need to scale back
# As a comparison, before we added the "highlight Git directory in the path", the prompt took about 0.04s inside a Git directory and
#  0.03 outside)
function __prompt_command() {
    local LAST_EXIT_CODE="${?}"

    # Regular ASCII colors
    # NOTE: The wrapping \[ and \] are necessary so Bash can  correctly calculate the size
    #  of the prompt:
    # https://wiki.archlinux.org/index.php/Bash/Prompt_customization#Terminfo_escape_sequences
    local RESET_COLOR="\[$(tput sgr0)\]"
    local BOLD="\[$(tput bold)\]"

    # Sexy 256-color colors
    # local SXY_DIR_FORE='\[\e[38;5;94m\]'
    # local LIGHT_GREY_BLUE=110
    local light_grey=243
    local dark_grey=236
    local very_dark_grey=235
    local very2_dark_grey=234
    local red=124
    local dark_red=88
    # local green=76
    local algae_green=76
    local brightish_red=160
    local grey_blue=110
    # local off_white=256
    local white=255

    # local timestamp_color="$(__get_color fore ${light_grey})"
    local timestamp_color="\[\e[38;5;${light_grey}m\]"
    local command_color="${BOLD}\[\e[38;5;${algae_green}m\]"

    # local dir_color="${BOLD}$(__get_color back "${very_dark_grey}")"
    # if [ ${LAST_EXIT_CODE} -ne 0 ]; then
    #     dir_color+="$(__get_color fore "${red}")"
    # fi

    local success_dir_color="\[\e[38;5;${white}m\]"
    local failure_dir_color="\[\e[38;5;${red}m\]"
    local success_gitdir_color="\[\e[38;5;${grey_blue}m\]"
    local failure_gitdir_color="\[\e[38;5;${brightish_red}m\]"

    # Setup prompt background
    PS1="${RESET_COLOR}$(__get_color back "${very_dark_grey}")"

    # Add timestamp
    PS1+="${timestamp_color} $(date +%H:%M:%S) "

    # Add working dir
    # PS1+="${dir_color}\w ${RESET_COLOR}"
    PS1+="${BOLD}"
    PS1+="$(__render_working_dir "${LAST_EXIT_CODE}" "${success_dir_color}" "${failure_dir_color}" "${success_gitdir_color}" "${failure_gitdir_color}") "

    # Add Git branch info
    PS1+="$(bash ~/.bash_utils/git-prompt-addition.sh)"

    # Clear prompt background & color command text
    PS1+="${RESET_COLOR} ${command_color}"

    if [ "${__new_wd:=$PWD}" != "${PWD}" ]; then
        ls
        [ -d ".git" ] && command -v git >/dev/null 2>&1 && ( git fetch --prune >/dev/null 2>&1 >/dev/null & )
    fi
    __new_wd=$PWD
}
PROMPT_COMMAND=__prompt_command

# This is a hacky and awesome thing that allows me to change my command color text but not the output. See:
# http://unix.stackexchange.com/questions/198723/change-color-of-input-text-not-output
trap 'echo -ne "\e[0m"' DEBUG

export EDITOR="vim"

# Make completion better
bind "set completion-ignore-case on"
bind "set show-all-if-ambiguous on"

export PYENV_ROOT="$HOME/.pyenv"

# Set all additions to PATH
PATH_ADDITIONS=()
PATH_ADDITIONS+=("$HOME/.rvm/bin")    # RVM to PATH for scripting
PATH_ADDITIONS+=("$PYENV_ROOT/bin:$PATH")
for PATH_TO_ADD in "${PATH_ADDITIONS[@]}"; do
    PATH="$PATH:$PATH_TO_ADD"
done

eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# Source RVM scripts
if [[ -s "$HOME/.rvm/scripts/rvm" ]] ; then
    source ~/.rvm/scripts/rvm
fi

# Custom bash additions
if [ -f ~/.bash_additions ]; then
  source ~/.bash_additions
fi

# Alias definitions
if [ -f ~/.bash_aliases ]; then
    source ~/.bash_aliases
fi

# Mac-specific additions
if [ -f ~/.bash_mac ]; then
    source ~/.bash_mac
fi

# Machine-specific additions
if [ -f ~/.bash_local ]; then
    source ~/.bash_local
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    source /etc/bash_completion
fi
