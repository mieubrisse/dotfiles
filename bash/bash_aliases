# ls conveniences
function ls() { # Display an empty line for empty directories
    if [[ $(/bin/ls $@ | wc -l) -eq 0 ]]; then
        echo 
    else
        /bin/ls -G "$@"
    fi
}
alias ll='ls -Alhtr'
alias lld='ll -t' # Sort by date last modified
alias la='ls -A'

# Make find not suck
alias cif="find . -iname" # Case-insensitive find
function ff() { # Fuzzy find
    SEARCH_STR="$1"
    shift 1
    cif "*$SEARCH_STR*" "$@"
}

# Breaks a command result by newline and lets the user manually filter the output
# E.g. 'filter ls ' would give the option of copying one of the ls results
# Handles piped input, so 'ls | filter' accomplishes the same as the above
function filter {
    # If it exists, read data from stdin to handle piped input
    if [ "$(tty)" == 'not a tty' ]; then
        while IFS='' read -r LINE; do
            ITEM_ARR+=("$LINE")
        done

    # Otherwise, perform the command the user specifies
    else
        COMMAND="$1"
        shift 1
        ITEM_ARR=($("$COMMAND" "$@"))
    fi

    # List out the results of the command and let user pick one if there are multiple
    ARR_SIZE="${#ITEM_ARR[@]}"
    if [[ "$ARR_SIZE" -gt 1 ]]; then
        for idx in "${!ITEM_ARR[@]}"; do
            printf "%s\t%s\n" "$idx" "${ITEM_ARR[$idx]}" >/dev/tty  # Have to use /dev/tty to not interfere with user input
        done
        read -p "Use which? " TARGET_IDX </dev/tty >&2
        TARGET_ITEM="${ITEM_ARR[$TARGET_IDX]}"
    elif [[ "$ARR_SIZE" -eq 1 ]]; then
        printf "One result: \t${ITEM_ARR[0]}\n" >/dev/tty
        TARGET_ITEM="${ITEM_ARR[0]}"
    else
        echo "No results to filter" >/dev/tty
        return
    fi
    # echo "Copied $TARGET_ITEM to clipboard" >&2
    printf "$TARGET_ITEM"
}

# Use fuzzy find and filter to open a file in Vim
function vff() {
    vim `ff "$@" | filter`
}

# Easily copy the contents of a file
function clip() {
    cat "$@" | pbcopy
}

# I don't remember what this is supposed to do
# function coolcp() { cat | lazregx "$@" | pbcopy; }

# Source .bashrc for convenience
alias srcbash=". ~/.bashrc"

# Have mkdir create parent directories if they don't already exist
alias mkdir="mkdir -p"

# Make directory and cd into it
function mkdircd() { mkdir "$@"; cd "$1"; }

# === grep ===========
alias csgr='grep -I --color=auto'    # Case-sensitive grep
alias gr='csgr -i'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
function rgr() { gr -r "$@" *; }
function csrgr() { csgr -r "$@" *; }  # Case-sensitive recursive grep

# Grep chain commands
alias hgr='history | gr'
alias pgr='ps aux | gr'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Map command to open last vim session
alias   v="vim"
VIM_SESSION="~/.vim/.saved-session.vim"
alias   vims="vim -S $VIM_SESSION"

# Jobs should show PID by default
alias   jobs="jobs -l"

# Quickly manage Palantir quickstarts
alias   quickchange="/Users/ktoday/scripts/quickchange/quickchange"

# Don't want to make srm too easy to use!
# alias srm="srm -i"

# Rebind 'cd' to list contents after changing directory 
# function cd() { builtin cd "${@:-$HOME}" && ls; }

# Output redirection functions
function    unify_output() { 2>&1 "${@}"; }
function    quiet() { "${@}" 2> /dev/null; }
function    silent() { "${@}" > /dev/null 2>&1; }

# Announces a completed task
function announce() {
	"$@"
	[[ $? == 127 ]] && return 1	# Don't speak for command not found
	VOICE_TXT=`printf "$1" | sed "s:.*/\(\.*\)::g"`" command is done"	# Speak only command name
	say -v "Vicki" "$VOICE_TXT"
}

# --- Git Commands ------------------------
# Viewing changes
alias gs="git status -sb"
alias gd="git diff --word-diff=color"
alias gdc="gd --cached"
alias gl="git log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"
alias gll="git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n'' %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all"

# Making changes
alias gb="git branch"
alias gco="git checkout"
alias ga="git add"
alias gcm="git commit"
alias grs="git reset"
alias grs1="git reset --soft HEAD^"

# Dealing with remotes
alias gcl="git clone"
alias gf="git fetch --prune"
alias gpll="git pull"
function gpsh() {	# Push the branch upstream if it doesn't exist; otherwise just git push
	BRANCH_NAME="$(git rev-parse --abbrev-ref HEAD)"
	[[ $(git config "branch.$BRANCH_NAME.merge") == '' ]] && git push -u origin "$BRANCH_NAME" "$@" || git push "$@"; 
}
