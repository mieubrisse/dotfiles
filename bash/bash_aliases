# Better diff (Mac only)
alias diff="colordiff --ignore-space-change -u"

# Datetime
alias today='date +%F'
alias now='date +%F_%H-%M-%S'

# Allow editing Mac crontab with Vim per:
# http://superuser.com/questions/359580/error-adding-cronjobs-in-mac-os-x-lion
alias crontab="VIM_CRONTAB=true crontab"

# ls conveniences
function ls() { # Display an empty line for empty directories
    if [[ $(/bin/ls "${@}" | wc -l) -eq 0 ]]; then
        echo 
    else
        /bin/ls -G "$@"
    fi
}
alias ll='ls -Alhtr'
alias llt='ll -t' # Sort by date last modified
alias la='ls -A'
alias l='ls'

# du should always be human readable
alias du='du -h'


# Overwrite cd to jump up multiple levels with 'cd <# dir>..' syntax
function cd() {
    # If string isn't long enough, use builtin cd anyways
    if [[ ${#1} -lt 3 ]]; then
        builtin cd "$@"
    else
        # Check if string is in '<number>..' form
        if [[ "${1:(-2)}" == ".." ]] && [[ -n "${1%..}" ]] && [[ "${1%..}" =~ ^[0-9]+$ ]]; then
            REPEAT_TIMES="${1%..}"
            if [ "${REPEAT_TIMES}" -le 0 ]; then
                echo "Cannot do ${REPEAT_TIMES} cd's"
                return 1
            fi

            CD_STR=""
            while read; do
                CD_STR="../$CD_STR"
            done < <(seq 1 "${REPEAT_TIMES}")
            cd "$CD_STR"
        else
            builtin cd "$@"
        fi
    fi
}


# Easily copy the contents of one or more file
function clip() {
    pbcopy < "${@}"
}

# Have mkdir create parent directories if they don't already exist
alias mkdir="mkdir -p"


# Grep chain commands
alias hgr='history | gr'
alias pgr='ps aux | gr'

# Map command to open last vim session
alias   v="vim"
# TODO I have never used this and maybe I never will
VIM_SESSION=~/.vim/.saved-session.vim
alias   vims="vim -S ${VIM_SESSION}"

# Jobs should show PID by default
alias   jobs="jobs -l"

# Don't want to make srm too easy to use!
# alias srm="srm -i"

# Easy SSH port forwarding
function sshl { 
    COMMAND="${@:2}"
    ssh -L "${1}:localhost:${1}" "${COMMAND[@]}"
}

# Command line JSON prettifier
alias prettify-json="python -mjson.tool"

# Just because it's intuitive
alias eject="diskutil unmount"

alias chrome="open -a 'Google Chrome'"


# ======================================================================================
#                                   Searching & Navigating
# ======================================================================================
alias csgr='grep -I --color=auto'    # Case-sensitive grep
alias gr='csgr -i'
alias csegr='grep -I --color=auto' # Case-sensitive egrep
alias egr='csegr -i'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
function rgr() { gr --exclude-dir="." --exclude-dir=".." -r "$@" ./* ./.*; }
function csrgr() { csgr --exclude-dir="." --exclude-dir=".." -r "$@" ./* ./.*; }  # Case-sensitive recursive grep
function ergr() { egr --exclude-dir="." --exclude-dir=".." -r "$@" ./* ./.*; }
function csergr() { csegr --exclude-dir="." --exclude-dir=".." -r "$@" ./* ./.*; }  # Case-sensitive recursive egrep

# Given a file, detects what type it is and:
# 1) cd's to it if it's a directory
# 2) opens it in Vim if it's a text file
# 3) throws an error if it's a binary file
function smart_open {
    filepath="${1}"
    if ! [ -e "${filepath}" ]; then
        echo "Error: No such file at '${filepath}'" >&2
        return 1
    fi

    filetype="$(file "${filepath}" | awk '{print $NF}')"
    return_code=0
    case "${filetype}" in
        text)
            vim "${filepath}"
            ;;
        directory)
            cd "${filepath}"
            ;;
        *)
            # TODO handle PDF & JPG types
            echo "Error: Unknown filetype '${filetype}'" >&2
            return_code=1
            ;;
    esac
    return "${return_code}"
}
alias so="smart_open"

# TODO Idea:
# Fuzzy_find and fuzzy_ls can take an additional argument of the directory to search!

# Make find not suck, and exclude some sensible defaults (which I hope don't come back to bite me one day...)
alias cif="find . ! -name '*.class' -and -iname" # Case-insensitive find
function fuzzy_find() { 
    ARGS="${@}"
    cif "*${ARGS// /*}*"
}
function fuzzy_ls() {
    ARGS="${@}"
    cif "*${ARGS// /*}*" -maxdepth 1
}

# Allows user to choose which lines of piped input to pass through
alias filter="~/.bash_utils/filter.py"

# Pipes the output of the given command to filter
function _pipe_to_filter() {
    "${@}" | filter
}
alias fl="_pipe_to_filter fuzzy_ls"
alias ff="_pipe_to_filter fuzzy_find"

# Fuzzy searches for the given file, then filters output and feeds it into the given command
# $1 - Command to feed chosen file to
# $2 - Command to generate results for filtering
# $3+ - Arguments passed to command for generating results to filter
function use_command_filter_results() {
    # Unquoted word-splitting is intentional here
    ${1} $(${2} "${@:3}" | filter)
}

alias vff="use_command_filter_results 'vim -O' fuzzy_find"
alias vfl="use_command_filter_results 'vim -O' fuzzy_ls"
alias sff="use_command_filter_results 'smart_open' fuzzy_find"
alias sfl="use_command_filter_results 'smart_open' fuzzy_ls"

# $1 - arguments to pass to ls
# $2 - function to use to sort ls results (head|tail)
# $3 - number of results to ask for from head/tail
function _ls_results {
    ls "$1" | "$2" -n "$3"
}

# TODO Idea:
# "newest", "oldest", etc. can also take in a path to search for files on, perhaps? E.g. "newest 3 ~/Downloads*.par" says
# "Find the newest 3 files in ~/Downloads.par"

# Returns the __ most-recently-modified files
function newest {
    if [[ $# -eq 0 ]]; then
        NUM_RESULTS=1
    else
        NUM_RESULTS=$1
    fi
    _ls_results '-tr' 'tail' "$NUM_RESULTS"
}
alias latest="newest"

# Returns the __ least-recently-modified files
function oldest {
    if [[ $# -eq 0 ]]; then
        NUM_RESULTS=1
    else
        NUM_RESULTS=$1
    fi
    _ls_results '-tr' 'head' "$NUM_RESULTS"
}
alias earliest="oldest"

# Returns the __ first files alphabetically from ls
function first {
    if [[ $# -eq 0 ]]; then
        NUM_RESULTS=1
    else
        NUM_RESULTS=$1
    fi
    _ls_results '' 'head' "$NUM_RESULTS"
}

# Returns the __ last files alphabetically from ls
function last {
    if [[ $# -eq 0 ]]; then
        NUM_RESULTS=1
    else
        NUM_RESULTS=$1
    fi
    _ls_results '' 'tail' "$NUM_RESULTS"
}

# Returns the __ biggest files by filesize
function biggest {
    if [[ $# -eq 0 ]]; then
        NUM_RESULTS=1
    else
        NUM_RESULTS=$1
    fi
    _ls_results '-Sr' 'head' "$NUM_RESULTS"
}

# Returns the __ smallest files by filesize
function smallest {
    if [[ $# -eq 0 ]]; then
        NUM_RESULTS=1
    else
        NUM_RESULTS=$1
    fi
    _ls_results '-Sr' 'tail' "$NUM_RESULTS"
}

# ======================================================================================
#                                            Vim 
# ======================================================================================
alias sp="vim -o"
alias vsp="vim -O"

# ======================================================================================
#                                      Template-Filling
# ======================================================================================
# Handy convenience function for opening a meeting notes file from template
function meeting() {
    if [[ "${#}" -lt 3 ]]; then
        echo -e "Usage:\tmeeting <note destination dir> <template filepath> <note name fragment> [<note name fragment>...]"
        return 1
    fi
    dest_dirpath="${1}"
    shift
    template_filepath="${1}"
    shift
    args_str="${@}"
    filename="${args_str// /-}"
    filepath="${dest_dirpath}/$(today)_${filename%%.md}.md"
    if ! [[ -f "${filepath}" ]]; then
        vim -c "read ${template_filepath}" "${filepath}"
    else
        vim "${filepath}"
    fi
}

# Convenience method for starting a new set of meeting notes for a project
# NOTE: This relies on the meeting_notes_template_filepath variable being set
function easy_meeting() {
    if [ -z "${meeting_notes_template_filepath}" ]; then
        echo "meeting_notes_template_filepath variable is unset; make sure it gets set in ~/.bash_local" >&2
        return 1
    fi

    project="${1}"
    meeting_notes_dirpath="${HOME}/Documents/${project,,}/meeting-notes"
    if ! [ -d "${meeting_notes_dirpath}" ]; then
        mkdir "${meeting_notes_dirpath}"
    fi
    meeting "${meeting_notes_dirpath}" "${meeting_notes_template_filepath}" "${@}"
}

# Convenience method for converting meeting notes to Markdown
function easy_chrome() {
    project="${1}"
    shift 1
    meeting_notes_dirpath="${HOME}/Documents/${project,,}/meeting-notes"
    (
        cd "${meeting_notes_dirpath}"

        # Interestingly, piping to 'readarray' doesn't work, but this does
        readarray -t matching_files < <(fuzzy_ls "${@}" | filter)
        if ! [ ${#matching_files[@]} -eq 0 ]; then
            chrome "${matching_files[@]}"
        fi
    )
}

# ======================================================================================
#                                      Git
# ======================================================================================
# Viewing changes
alias gs="git status -sb"
alias gsh="git show"
alias gd="git diff --word-diff=color"
alias gdc="gd --cached"
alias gl="git log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold black)[%an]%C(reset)%C(bold yellow)%d%C(reset)' --all"

# Making changes
alias gb="git branch"
alias gco="git checkout"
alias ga="git add"

# We hijack Git's autocomplete here so we get autocompletion on our custom aliases
# This relies on the bash-completion Homebrew package
__git_complete gco _git_checkout
__git_complete gb _git_branch

# TODO It's getting to the point where I need a better system for dealing with fuzzy find/ls results..
alias gaff="use_command_filter_results 'git add' fuzzy_find"
alias gafl="use_command_filter_results 'git add' fuzzy_ls"

alias empty-commit="git commit --allow-empty -m $1"
alias gcm="git commit"
alias gcmm="git commit -m $1"
alias gg="git commit -am $1"
alias grs="git reset"
alias grs1="git reset --soft HEAD^"

# Dealing with remotes
alias gcl="git clone"
alias gf="git fetch --prune"
alias gpll="git pull"
function gpsh() {	# Push the branch upstream if it doesn't exist; otherwise just git push
	BRANCH_NAME="$(git rev-parse --abbrev-ref HEAD)"
	if [[ $(git config "branch.$BRANCH_NAME.merge") == '' ]]; then
            git push -u origin "$BRANCH_NAME" "$@"
        else
            git push "$@"
        fi
}
alias gprune-local-dry-run="git branch --merged | grep -v '\*' | grep -v 'master' | grep -v 'develop'"
alias gprune-local="git branch --merged | grep -v '\*' | grep -v 'master' | grep -v 'develop' | xargs -n 1 git branch -d"

alias gfl="bash ~/.bash_utils/gitflow-pp.sh"



# ======================================================================================
#                                      Gradle
# ======================================================================================
# Searches for a gradlew file up the tree and uses it for gradle commands
# Add 'nocd' as the first argument to run the gradle commands from the directory you're in at the moment
function gradle_search() {
    ORIG_DIR="$PWD"
    while [[ "$PWD" != "/" ]]; do
        if [[ -f "./gradlew" ]]; then
            if [[ "$1" == "nocd" ]]; then
                GRADLE_DIR=$(pwd)
                cd "$ORIG_DIR"
                echo "$GRADLE_DIR"/gradlew "${@:2}"
                "$GRADLE_DIR"/gradlew "${@:2}"
            else
                ./gradlew --daemon "$@"
                cd "$ORIG_DIR"
            fi
            return 0
        else
            cd ..
        fi
    done
    cd "${ORIG_DIR}"
    echo "No gradlew file found in any parent directories" >&2
}
alias grd="gradle_search"

alias rsync="rsync --perms --progress"

# Easy SSH aliases
# Interesting tidbit: I used to have a 'for line in $(grep '^Host.....)' thing here, but 
# one of my HostName entries in my SSH config file was '*', which was getting Bash glob-expanded and causing problems!
# Lesson learned...
grep '^Host' "${HOME}/.ssh/config" | grep -v '[*]' | awk '{print $2}' | while read -r ssh_host; do
    alias "${ssh_host}"="ssh '${ssh_host}'"
done

alias virtualenv="pyenv virtualenv"

# Make following a file much easier
alias lsf="less +F"

# Call this script and pass a text file with a list of servers. You will ssh to the servers as the current user.
# Once connected use Ctrl + a to enter commands
# de/syncronize panes = Ctrl + a + s
# Change panes = Ctrl + a + arrow-keys
# Zoom into pane = Ctrl + a + z
function parallel-tmux() {
    tmux new-session -s $(date +"%F_%H-%M-%S") -d
    count=-1
    for i in $(cat $1); do
      let count=${count}+1
      if [ $count -eq 0 ]; then
        tmux new-window "ssh $i"
      else
        tmux split-window -h "ssh $i"
        tmux select-layout tiled
      fi
    done
    tmux set-window-option synchronize-panes on
    tmux attach
}



# ======================================================================================
#                                      Navigation
# ======================================================================================
function _smart_open_dir_file {
    cd "${2}"
    if [ "${#}" -gt 2 ]; then
        use_command_filter_results 'smart_open' "${1}" "${@:3}"
    fi
}

dotfiles_dirpath="${HOME}/app/dotfiles"
alias dotfiles="cd '${dotfiles_dirpath}'"

code_dirpath="${HOME}/code"
alias code="_smart_open_dir_file fuzzy_ls '${code_dirpath}'"

downloads_dirpath="${HOME}/Downloads"
alias downloads="_smart_open_dir_file fuzzy_ls '${downloads_dirpath}'"

gdrive_dirpath="${HOME}/gdrive"
alias gdrive="_smart_open_dir_file fuzzy_ls '${gdrive_dirpath}'"

check_dirpath="${gdrive_dirpath}/checklists-and-templates"
alias check="_smart_open_dir_file fuzzy_find '${check_dirpath}'"

gref_dirpath="${gdrive_dirpath}/general-reference"
alias gref="_smart_open_dir_file fuzzy_ls '${gref_dirpath}'"

receipts_dirpath="${gdrive_dirpath}/receipts-records-confirmations"
alias receipts="_smart_open_dir_file fuzzy_find '${receipts_dirpath}'"

psup_dirpath="${gdrive_dirpath}/project-support"
alias psup="_smart_open_dir_file fuzzy_ls '${psup_dirpath}'"

someday_dirpath="${gdrive_dirpath}/someday-maybe"
alias someday="_smart_open_dir_file fuzzy_find '${someday_dirpath}'"

alias self_improvement="_smart_open_dir_file fuzzy_find '${gref_dirpath}/self-improvement'"



# ======================================================================================
#                                      Docker
# ======================================================================================
clear_containers() {
    docker rm $(docker stop $(docker ps -a --quiet --format="{{.ID}}"))
}
alias cclear=clear_containers

clear_old_images() {
    docker image rm $(docker images --quiet --filter "dangling=true")
}
alias iclear=clear_old_images



# ======================================================================================
#                                  Custom-Built Apps
# ======================================================================================
# Wealthdraft aliases
alias wealthdraft="java -jar ${HOME}/app/wealthdraft/*.jar"

# cli-journal aliases
alias journal="java -jar ${HOME}/app/cli-journal/*.jar"
alias jnew="journal new"

alias todays-goals="journal new todays-goals.md todays-goals"
