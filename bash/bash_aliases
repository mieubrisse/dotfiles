# Better diff (Mac only)
alias diff="colordiff --ignore-space-change -u"

# Datetime
alias today='date +%F'
alias now='date +%F_%H-%M-%S'

# Allow editing Mac crontab with Vim per:
# http://superuser.com/questions/359580/error-adding-cronjobs-in-mac-os-x-lion
alias crontab="VIM_CRONTAB=true crontab"

# ls conveniences
function ls() { # Display an empty line for empty directories
    if [[ $(lsd --icon never "${@}" | wc -l) -eq 0 ]]; then
        echo 
    else
        lsd --icon never -G "$@"
    fi
}
alias ll='ls -Alhtr'
alias llt='ll -t' # Sort by date last modified
alias la='ls -A'
alias l='ls'

# du should always be human readable
alias du='du -h'


# Overwrite cd to jump up multiple levels with 'cd <# dir>..' syntax
function cd() {
    # If string isn't long enough, use builtin cd anyways
    if [[ ${#1} -lt 3 ]]; then
        builtin cd "$@"
    else
        # Check if string is in '<number>..' form
        if [[ "${1:(-2)}" == ".." ]] && [[ -n "${1%..}" ]] && [[ "${1%..}" =~ ^[0-9]+$ ]]; then
            REPEAT_TIMES="${1%..}"
            if [ "${REPEAT_TIMES}" -le 0 ]; then
                echo "Cannot do ${REPEAT_TIMES} cd's"
                return 1
            fi

            CD_STR=""
            while read; do
                CD_STR="../$CD_STR"
            done < <(seq 1 "${REPEAT_TIMES}")
            cd "$CD_STR"
        else
            builtin cd "$@"
        fi
    fi
}


# Easily copy the contents of one or more file
function clip() {
    pbcopy < "${@}"
}

# Have mkdir create parent directories if they don't already exist
alias mkdir="mkdir -p"


# Grep chain commands
alias hgr='history | gr'
alias pgr='ps aux | gr'

# Map command to open last vim session
alias   v="vim"
# TODO I have never used this and maybe I never will
VIM_SESSION=~/.vim/.saved-session.vim
alias   vims="vim -S ${VIM_SESSION}"

# Jobs should show PID by default
alias   jobs="jobs -l"

# Easy SSH port forwarding
function sshl { 
    COMMAND="${@:2}"
    ssh -L "${1}:localhost:${1}" "${COMMAND[@]}"
}

# Command line JSON prettifier
alias prettify-json="python -mjson.tool"

# Just because it's intuitive
alias eject="diskutil unmount"

# Adds a `chrome` command that I use for rendering Markdown files, with completion
alias chrome="open -a 'Google Chrome'"
_chrome_completion() {
    local cur="${COMP_WORDS[COMP_CWORD]}"
    local IFS=$'\n'
    local matches=()

    for entry in $(compgen -f -- "$cur"); do
        if [ -d "$entry" ]; then
            matches+=("${entry}/")
        elif echo "$entry" | grep -q '\.md$'; then
            matches+=("$entry")
        fi
    done

    COMPREPLY=("${matches[@]}")

    # Prevent trailing space after completion so directories can be drilled into
    if [ ${#COMPREPLY[@]} -eq 1 ] && echo "${COMPREPLY[0]}" | grep -q '/$'; then
        compopt -o nospace
    fi
}
complete -F _chrome_completion chrome # Allow completion of Markdown files, and directories that might have Markdown files

function replace() {
    needle="${1:-}"
    replacement="${2:-}"
    filename_regex="${3:-}"

    if [ -z "${needle}" ]; then
        echo "Error: First argument must be a string to find" >&2
        return 1
    fi
    if [ -z "${replacement}" ]; then
        echo "Error: Second argument must be a string to replace found patterns with" >&2
        return 1
    fi
    if [ -z "${filename_regex}" ]; then
        echo "Error: Third argument must be a 'find'-compatible regex of filenames to match" >&2
        return 1
    fi

    local DELETE_SUFFIX=".deleteme"
    sed -i"${DELETE_SUFFIX}" "s?${needle}?${replacement}?g" $(find . -name "${filename_regex}")
    find . -name "*${DELETE_SUFFIX}" -delete
}

# ======================================================================================
#                                   Searching & Navigating
# ======================================================================================
alias csgr='grep -I --color=auto'    # Case-sensitive grep
alias gr='csgr -i'
alias csegr='grep -I --color=auto' # Case-sensitive egrep
alias egr='csegr -i'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
function rgr() { gr --exclude-dir="." --exclude-dir=".." -r "$@" ./* ./.*; }
function csrgr() { csgr --exclude-dir="." --exclude-dir=".." -r "$@" ./* ./.*; }  # Case-sensitive recursive grep
function ergr() { egr --exclude-dir="." --exclude-dir=".." -r "$@" ./* ./.*; }
function csergr() { csegr --exclude-dir="." --exclude-dir=".." -r "$@" ./* ./.*; }  # Case-sensitive recursive egrep

# Given a file, detects what type it is and:
# 1) cd's to it if it's a directory
# 2) opens it in Vim if it's a text file
# 3) throws an error if it's a binary file
function smart_open {
    filepath="${1}"
    if ! [ -e "${filepath}" ]; then
        echo "Error: No such file at '${filepath}'" >&2
        return 1
    fi

    # TODO Handle multiple input files
    filetype="$(file "${filepath}" | sed 's/, with very long lines//g' | awk '{print $NF}')"
    return_code=0
    case "${filetype}" in
        text)
            vim "${filepath}"
            ;;
        directory)
            cd "${filepath}"
            ;;
        *)
            # TODO handle PDF & JPG types
            echo "Error: Unknown filetype '${filetype}'" >&2
            return_code=1
            ;;
    esac
    return "${return_code}"
}
alias so="smart_open"

# TODO Idea:
# Fuzzy_find and fuzzy_ls can take an additional argument of the directory to search!

# Make find not suck, and exclude some sensible defaults (which I hope don't come back to bite me one day...)
alias cif="find . ! -name '*.class' -and -iname" # Case-insensitive find
function fuzzy_find() { 
    ARGS="${@}"
    ARGS="${ARGS%%/}"  # Remove trailing slash so we can find directories by name
    cif "*${ARGS// /*}*"
}
function fuzzy_ls() {
    ARGS="${@}"
    ARGS="${ARGS%%/}"  # Remove trailing slash so we can find directories by name
    cif "*${ARGS// /*}*" -maxdepth 1
}
alias ff="fuzzy_find"
alias fl="fuzzy_ls"

# Allows user to choose which lines of piped input to pass through
alias filter="${HOME}/.bash_utils/filter.py"

# Pipes the output of the given command to filter
function _pipe_to_filter() {
    "${@}" | filter
}
alias fff="_pipe_to_filter fuzzy_find"

# Fuzzy searches for the given file, then filters output and feeds it into the given command
# $1 - Command to feed chosen file to
# $2 - Command to generate results for filtering
# $3+ - Arguments passed to command for generating results to filter
function use_command_filter_results() {
    # Unquoted word-splitting is intentional here
    ${1} $(${2} "${@:3}" | filter)
}

alias vff="use_command_filter_results 'vim -O' fuzzy_find"
alias vfl="use_command_filter_results 'vim -O' fuzzy_ls"
alias sff="use_command_filter_results 'smart_open' fuzzy_find"
alias sfl="use_command_filter_results 'smart_open' fuzzy_ls"

# $1 - arguments to pass to ls
# $2 - function to use to sort ls results (head|tail)
# $3 - number of results to ask for from head/tail
function _ls_results {
    ls "$1" | "$2" -n "$3"
}

# TODO Idea:
# "newest", "oldest", etc. can also take in a path to search for files on, perhaps? E.g. "newest 3 ~/Downloads*.par" says
# "Find the newest 3 files in ~/Downloads.par"

# Returns the __ most-recently-modified files
function newest {
    if [[ $# -eq 0 ]]; then
        NUM_RESULTS=1
    else
        NUM_RESULTS=$1
    fi
    _ls_results '-tr' 'tail' "$NUM_RESULTS"
}
alias latest="newest"

# Returns the __ least-recently-modified files
function oldest {
    if [[ $# -eq 0 ]]; then
        NUM_RESULTS=1
    else
        NUM_RESULTS=$1
    fi
    _ls_results '-tr' 'head' "$NUM_RESULTS"
}
alias earliest="oldest"

# Returns the __ first files alphabetically from ls
function first {
    if [[ $# -eq 0 ]]; then
        NUM_RESULTS=1
    else
        NUM_RESULTS=$1
    fi
    _ls_results '' 'head' "$NUM_RESULTS"
}

# Returns the __ last files alphabetically from ls
function last {
    if [[ $# -eq 0 ]]; then
        NUM_RESULTS=1
    else
        NUM_RESULTS=$1
    fi
    _ls_results '' 'tail' "$NUM_RESULTS"
}

# Returns the __ biggest files by filesize
function biggest {
    if [[ $# -eq 0 ]]; then
        NUM_RESULTS=1
    else
        NUM_RESULTS=$1
    fi
    _ls_results '-Sr' 'head' "$NUM_RESULTS"
}

# Returns the __ smallest files by filesize
function smallest {
    if [[ $# -eq 0 ]]; then
        NUM_RESULTS=1
    else
        NUM_RESULTS=$1
    fi
    _ls_results '-Sr' 'tail' "$NUM_RESULTS"
}



# ======================================================================================
#                                      fzf "cmd-k"
# ======================================================================================
function cmdk() {
    # Set up the prompt for reading files
    read -r -d '' _cmdk_fzf_default_cmd <<-'EOF'

fd_base_cmd="fd --follow --hidden --color=always"

# !!! NOTE !!!! order is important!!
# fzf gives higher weight to lines earlier in the input, so we put most relevant things first

if [ "${PWD}" = "${HOME}" ]; then
    # Skip several directories in home that contain a bunch of garbage
    ${fd_base_cmd} --strip-cwd-prefix \
        -E 'Applications' \
        -E 'Library' \
        -E '.pyenv' \
        -E '.jenv' \
        -E '.nvm' \
        -E 'go' \
        -E 'venvs' \
        -E '.cursor' \
        -E '.docker' \
        -E '.vscode' \
        -E '.cache' \
        -E '.gradle' \
        -E '.zsh_sessions' \
        .
else
    ${fd_base_cmd} --strip-cwd-prefix .
fi

echo 'HOME'   # HOME
echo '..'     # Parent directory

# If we're not in the home directory, include stuff in the home directory
if [ "${PWD}" != "${HOME}" ]; then
    # Skip the Applications and Library in the home directory; they contain a bunch of garbage
    ${fd_base_cmd} \
        -E 'Applications' \
        -E 'Library' \
        -E '.pyenv' \
        -E '.jenv' \
        -E '.nvm' \
        -E 'go' \
        -E 'venvs' \
        -E '.cursor' \
        -E '.docker' \
        -E '.vscode' \
        -E '.cache' \
        -E '.gradle' \
        -E '.zsh_sessions' \
        . \
        "${HOME}"
fi

echo '/tmp/'  # /tmp

echo '/'      # Root
${fd_base_cmd} --exact-depth 1 . / # Show one level of root

# Add back .pyenv and .jenv just in case the user wants to 'cd' to them
echo "${HOME}/.pyenv"
echo "${HOME}/.jenv"
echo "${HOME}/.nvm"
echo "${HOME}/go"
echo "${HOME}/venvs"
echo "${HOME}/.cursor"
echo "${HOME}/.docker"
echo "${HOME}/.vscode"
echo "${HOME}/.cache"
echo "${HOME}/.gradle"
echo "${HOME}/.zsh_sessions"
EOF

    
    read -r -d '' _cmdk_fzf_preview_cmd <<-'EOF'
ls_base_cmd='ls --color=always'

case {} in
    HOME)
        ${ls_base_cmd} "${HOME}"
        ;;
    *)
        case $(file -b --mime-type {} ) in 
            text/*) 
                bat --color=always {}
                ;; 
            inode/directory) 
                ${ls_base_cmd} {}
                ;; 
            image/*) 
                tiv -w 100 -h 100 {}
                ;; 
        esac
        ;;
esac
EOF
    

    # EXPLANATION:
    # -m allows multiple selections
    # --ansi tells fzf to parse the ANSI color codes that we're generating with fd
    # --scheme=path optimizes for path-based input
    # --with-nth allows us to use the custom sorting mechanism
    IFS=$'\n' output_paths=( 
        $(FZF_DEFAULT_COMMAND="${_cmdk_fzf_default_cmd}" fzf \
            -m \
            --ansi \
            --scheme=path \
            --preview="${_cmdk_fzf_preview_cmd}" \
        )
    )
    if [ "${?}" -ne 0 ]; then
        return
    fi

    dirs=()
    text_files=()
    open_targets=()
    for output in "${output_paths[@]}"; do
        case "${output}" in
            HOME)
                dirs+=("${HOME}")
                ;;
            *.key)   # Mac's keynote presentation files are 'application/zip' MIME type, so we have to identify by extension
                open_targets+=("${output}")
                ;;
            *)
                case $(file -b --mime-type "${output}") in
                    text/*)
                        text_files+=("${output}")
                        ;;
                    inode/directory)
                        dirs+=("${output}")
                        ;;
                    application/pdf)
                        open_targets+=("${output}")
                        ;;
                    application/vnd.openxmlformats-officedocument.wordprocessingml.document)
                        open_targets+=("${output}")
                        ;;
                    image/*)
                        open_targets+=("${output}")
                        ;;
                esac
                ;;
        esac
    done

    num_dirs="${#dirs[@]}"
    if [ "${num_dirs}" -eq 1 ]; then
        cd "${dirs[0]}"
    elif [ "${num_dirs}" -gt 1 ]; then
        echo "Error: Cannot cd to more than one directory at a time" >&2
        return 1
    fi

    for open_target_filepath in "${open_targets[@]}"; do
        open "${open_target_filepath}"
    done

    if [ "${#text_files[@]}" -gt 0 ]; then
        vim -O "${text_files[@]}"
    fi
}



# ======================================================================================
#                                            Vim 
# ======================================================================================
alias sp="vim -o"
alias vsp="vim -O"

# ======================================================================================
#                                      Git
# ======================================================================================
# Viewing changes
alias gs="git status -sb"
alias gsh="git show"
alias gd="git diff --word-diff=color"
alias gdc="gd --cached"
alias gl="git log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold black)[%an]%C(reset)%C(bold yellow)%d%C(reset)' --all"

# Making changes
alias gb="git branch"
function gco {   # Use fzf to select branches if no arguments are provided
    if [ "${#}" -eq 0 ]; then
        git branch -la --format="%(refname:short)" | sed 's,^origin/,,' | sort -u | fzf --bind='enter:become(git checkout {})'
    else
        git checkout "${@}"
    fi
}

ga() {   # Use fzf to select files if no arguments are provided
    if [ $# -eq 0 ]; then
        local candidates
        candidates=$(git status --porcelain | grep '^[ MARC][ MD]' | cut -c4-)

        if [ -z "$candidates" ]; then
            echo "Working directory clean; no files to add."
            return
        fi

        local selection
        selection=$(echo -e "[ALL]\n$candidates" | fzf -m --prompt="Add files: ")

        if [[ "$selection" == *"[ALL]"* ]]; then
            echo "$candidates" | xargs git add --
        elif [ -n "$selection" ]; then
            echo "$selection" | xargs git add --
        fi
    else
        git add "$@"
    fi
}

# We hijack Git's autocomplete here so we get autocompletion on our custom aliases
# This relies on the bash-completion Homebrew package being loaded before this runs
__git_complete gco _git_checkout
__git_complete gb _git_branch

alias empty-commit="git commit --allow-empty -m $1"
alias gcm="git commit"
alias gcmm="git commit -m $1"
alias gg="git commit -am $1"
grs() {    # Use fzf to select files to reset if no arguments are provided
    if [ $# -eq 0 ]; then
        local candidates
        candidates=$(git status --porcelain | grep '^[ MARC][ MD]' | cut -c4-)

        if [ -z "$candidates" ]; then
            echo "Working directory clean; no files to unstage."
            return
        fi

        local selection
        selection=$(echo -e "[ALL]\n$candidates" | fzf -m --prompt="Reset files: ")

        if [[ "$selection" == *"[ALL]"* ]]; then
            echo "$candidates" | xargs git reset --
        elif [ -n "$selection" ]; then
            echo "$selection" | xargs git reset --
        fi
    else
        git reset "$@"
    fi
}
alias grs1="git reset --soft HEAD^"

# Dealing with remotes
alias gcl="git clone"
alias gf="git fetch --prune"
alias gpll="git pull"
function gpsh() {	# Push the branch upstream if it doesn't exist; otherwise just git push
	BRANCH_NAME="$(git rev-parse --abbrev-ref HEAD)"
	if [[ $(git config "branch.$BRANCH_NAME.merge") == '' ]]; then
            git push -u origin "$BRANCH_NAME" "$@"
        else
            git push "$@"
        fi
}
alias gprune-local-dry-run="git branch --merged | grep -v '\*' | grep -v 'master' | grep -v 'develop'"
alias gprune-local="git branch --merged | grep -v '\*' | grep -v 'master' | grep -v 'develop' | xargs -n 1 git branch -d"


# ======================================================================================
#                                      Gradle
# ======================================================================================
# Searches for a gradlew file up the tree and uses it for gradle commands
# Add 'nocd' as the first argument to run the gradle commands from the directory you're in at the moment
function gradle_search() {
    ORIG_DIR="$PWD"
    while [[ "$PWD" != "/" ]]; do
        if [[ -f "./gradlew" ]]; then
            if [[ "$1" == "nocd" ]]; then
                GRADLE_DIR=$(pwd)
                cd "$ORIG_DIR"
                echo "$GRADLE_DIR"/gradlew "${@:2}"
                "$GRADLE_DIR"/gradlew "${@:2}"
            else
                ./gradlew --daemon "$@"
                cd "$ORIG_DIR"
            fi
            return 0
        else
            cd ..
        fi
    done
    cd "${ORIG_DIR}"
    echo "No gradlew file found in any parent directories" >&2
}
alias grd="gradle_search"

alias rsync="rsync --perms --progress"

# Easy SSH aliases
# Interesting tidbit: I used to have a 'for line in $(grep '^Host.....)' thing here, but 
# one of my HostName entries in my SSH config file was '*', which was getting Bash glob-expanded and causing problems!
# Lesson learned...
grep '^Host' "${HOME}/.ssh/config" | grep -v '[*]' | awk '{print $2}' | while read -r ssh_host; do
    alias "${ssh_host}"="ssh '${ssh_host}'"
done

alias virtualenv="pyenv virtualenv"

# Make following a file much easier
alias lsf="less +F"

# Call this script and pass a text file with a list of servers. You will ssh to the servers as the current user.
# Once connected use Ctrl + a to enter commands
# de/syncronize panes = Ctrl + a + s
# Change panes = Ctrl + a + arrow-keys
# Zoom into pane = Ctrl + a + z
function parallel-tmux() {
    tmux new-session -s $(date +"%F_%H-%M-%S") -d
    count=-1
    for i in $(cat $1); do
      let count=${count}+1
      if [ $count -eq 0 ]; then
        tmux new-window "ssh $i"
      else
        tmux split-window -h "ssh $i"
        tmux select-layout tiled
      fi
    done
    tmux set-window-option synchronize-panes on
    tmux attach
}



# ======================================================================================
#                                      Navigation
# ======================================================================================
function _smart_open_dir_file {
    cd "${2}"
    if [ "${#}" -gt 2 ]; then
        use_command_filter_results 'smart_open' "${1}" "${@:3}"
    fi
}

dotfiles_dirpath="${HOME}/app/dotfiles"
alias dotfiles="cd '${dotfiles_dirpath}'"

code_dirpath="${HOME}/code"
alias code="_smart_open_dir_file fuzzy_ls '${code_dirpath}'"

downloads_dirpath="${HOME}/Downloads"
alias downloads="_smart_open_dir_file fuzzy_ls '${downloads_dirpath}'"

gdrive_dirpath="${HOME}/gdrive"
alias gdrive="_smart_open_dir_file fuzzy_ls '${gdrive_dirpath}'"

check_dirpath="${gdrive_dirpath}/checklists-and-templates"
alias check="_smart_open_dir_file fuzzy_find '${check_dirpath}'"

gref_dirpath="${gdrive_dirpath}/general-reference"
alias gref="_smart_open_dir_file fuzzy_find '${gref_dirpath}'"

receipts_dirpath="${gdrive_dirpath}/receipts-records-confirmations"
alias receipts="_smart_open_dir_file fuzzy_find '${receipts_dirpath}'"

psup_dirpath="${gdrive_dirpath}/project-support"
alias psup="_smart_open_dir_file fuzzy_ls '${psup_dirpath}'"

someday_dirpath="${gdrive_dirpath}/someday-maybe"
alias someday="_smart_open_dir_file fuzzy_find '${someday_dirpath}'"

alias self_improvement="_smart_open_dir_file fuzzy_find '${gref_dirpath}/self-improvement'"





# ======================================================================================
#                                      Docker
# ======================================================================================
clear_containers() {
    docker rm $(docker stop $(docker ps -a --quiet --format="{{.ID}}"))
}
alias cclear=clear_containers
function volume_exec() {
    volume_name="${1}"
    shift 1

    volume_path="$(docker volume inspect "${volume_name}" | grep 'Mountpoint' | awk '{print $2}' | sed 's/"\(.*\)",/\1/g')"
    full_volume_path="/docker${volume_path}"

    num_args="${#}"
    penultimate_arg_index="$((num_args - 1))"

    path_inside_volume="${1}"
    if [ "${num_args}" -gt 1 ]; then
        set -- "${@:1:${penultimate_arg_index}}" "${full_volume_path}/${@:${num_args}}"
    else
        set -- "${full_volume_path}/${@:${num_args}}"
    fi

    docker run --rm -it -v /:/docker alpine:edge "${@}"
}

clear_old_images() {
    docker image rm $(docker images --quiet --filter "dangling=true")
}
alias iclear=clear_old_images



# ======================================================================================
#                                      Kubernetes
# ======================================================================================
alias k8s="kubectl"


# ======================================================================================
#                                      Kurtosis
# ======================================================================================
# Alias 'kt' to 'kurtosis'
alias kt="kurtosis"
complete -F __start_kurtosis kt

# Alias 'kt' to the dev version of Kurtosis
alias ktdev="${code_dirpath}/kurtosis-monorepo/cli/cli/scripts/launch-cli.sh"

# ======================================================================================
#                                      Python
# ======================================================================================
alias python="python3"


# ======================================================================================
#                                  ffmpeg + gifsicle
# ======================================================================================
function gifinate() {
    if [ "${#}" -ne "2" ]; then
        echo "Usage: gifinate input_filepath output_size" >&2
        echo "Note that size will be in WxH format" >&2
        return 1
    fi
    input_filepath="${1}"
    output_size="${2}"

    if [ "${input_filepath%%.mov}" = "${input_filepath}" ]; then
        echo "Error: Input filepath must be a .mov" >&2
        return 1
    fi

    ffmpeg -i "${input_filepath}" -s "${output_size}" -pix_fmt rgb24 -r 15 -f gif - | gifsicle --optimize=3 --delay=3 > "${input_filepath}.gif"
}



# ======================================================================================
#                                  Custom-Built Apps
# ======================================================================================
# Wealthdraft aliases
function wealthdraft() {
    binary_dirpath="/wealthdraft"
    configs_dirpath="/config"
    docker run --rm \
        -v "${gref_dirpath}/finance/wealthdraft-personal-configs:${configs_dirpath}" \
        -v "${HOME}/app/wealthdraft:${binary_dirpath}" \
        amazoncorretto:11-alpine \
        sh -c "java -jar ${binary_dirpath}/*.jar \
            --gov-constants ${configs_dirpath}/gov-constants.yml \
            --scenarios ${configs_dirpath}/scenarios.yml \
            --assets ${configs_dirpath}/assets.yml \
            --assets-history ${configs_dirpath}/assets-history.yml \
            --projections ${configs_dirpath}/projections.yml \
            --asset-allocations ${configs_dirpath}/asset-allocations.yml \
            --filters ${configs_dirpath}/filters.yml \
            --all"

}


# ======================================================================================
#                                    CLI Journal
# ======================================================================================
# cli-journal aliases
alias journal="activate_jenv_and_java_home && java -jar ${HOME}/app/cli-journal/*.jar"
alias jnew="journal new"
alias jfind="journal find"

alias todays-goals="journal new todays-goals.md todays-goals"


# ======================================================================================
#                                    Health Journal
# ======================================================================================
alias health="vim ${gdrive_dirpath}/general-reference/health/health-journal.md"
