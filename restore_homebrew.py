'''
From a backup JSON file, installs taps, brews, and casks
Author: mieubrisse
'''

import argparse
import subprocess
import os
import re
import sys
import json

_INPUT_FILEPATH_ARGVAR = "input_filepath"

_BREW_CMD = "brew"

def _parse_args(argv):
    ''' Parses args into a dict of ARGVAR=value, or None if the argument wasn't supplied '''
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument(_INPUT_FILEPATH_ARGVAR, metavar="<input JSON file>", help="Input JSON file generated by Homebrew backup script")
    return vars(parser.parse_args(argv))

def _validate_args(args):
    return None
 
def _print_error(msg):
    sys.stderr.write('Error: ' + msg + '\n')

def main(argv):
    args = _parse_args(map(str, argv))
    err = _validate_args(args)
    if err is not None:
        return err

    input_filepath = os.path.realpath(args[_INPUT_FILEPATH_ARGVAR])

    with open(input_filepath) as input_fp:
        input_obj = json.load(input_fp)

    for tap in input_obj["taps"]:
        subprocess.check_call([_BREW_CMD, "tap", tap])

    for brew in input_obj["brews"]:
        subprocess.check_call([_BREW_CMD, "install", brew])

    for cask in input_obj["casks"]:
        subprocess.check_call([_BREW_CMD, "cask", "install", cask])

    return 0

if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
