" ========================================================================
"                                 Plugins 
" ========================================================================
" ---------------------------- vim-polyglot ------------------------------
" vim-polyglot wants you to set this BEFORE loading the plugin
" Because our plugins get loaded below, we set this here
" We disable markdown polyglot on markdown and csv, because it's weird
let g:polyglot_disabled = ['markdown', 'csv']
let g:csv_no_conceal = 1

" ----------------------------- Vundle -----------------------------------
" Set 'nocompatible' to ward off unexpected things that your distro might
" have made, as well as sanely reset options when re-sourcing .vimrc
" This is also required for Vundle
set nocompatible

" Required for Vundle install
filetype off

" ------------------------- Vim-Plug Plugins ------------------------------
" From: https://github.com/junegunn/vim-plug/wiki/tips#conditional-activation
function! Cond(cond, ...)
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction

call plug#begin("~/.vim-plug")

Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'
Plug 'hrsh7th/nvim-cmp'

" For vsnip users.
Plug 'hrsh7th/cmp-vsnip'
Plug 'hrsh7th/vim-vsnip'

" NOTES:
" - :PlugInstall is required after adding a plugin here!!!!
" - :PlugClean will remove old plugins

" Seems like jellybeans has gone out of development
Plug 'nanotech/jellybeans.vim'

Plug 'vim-scripts/groovy.vim'
Plug 'tfnico/vim-gradle'
Plug 'uarun/vim-protobuf'
" Plug 'kien/ctrlp.vim'
" Plug 'scrooloose/nerdtree'
Plug 'tomtom/tcomment_vim'
" Plug 'davidhalter/jedi-vim'
Plug 'leafgarland/typescript-vim'

" Both of these are required for plasticboy's Markdown syntax
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'

" All the Vim YAML plugins are miserable...
" Plug 'avakhov/vim-yaml'
" Plug 'chase/vim-ansible-yaml'

" Plug 'tomtom/tlib_vim'
" Plug 'MarcWeber/vim-addon-mw-utils'
" Plug 'kchmck/vim-coffee-script'
" Plug 'easymotion/vim-easymotion'
" Plug 'pangloss/vim-javascript'
Plug 'sheerun/vim-polyglot'
Plug 'elzr/vim-json'
Plug 'groenewege/vim-less'
Plug 'kshenoy/vim-signature'
" Plug 'derekwyatt/vim-scala'
" Plug 'garbas/vim-snipmate'
" Plug 'SirVer/ultisnips'
" Plug 'honza/vim-snippets'
" Plug 'tristen/vim-sparkup'
" Plug 'tpope/vim-surround'
" Plug 'sukima/xmledit'
Plug 'airblade/vim-gitgutter'
" Plug 'mustache/vim-mustache-handlebars'
" Plug 'fatih/vim-go'
Plug 'vim-airline/vim-airline'
" Plug 'tpope/vim-fugitive'
" Plug 'gregsexton/gitv'
" Plug 'kablamo/vim-git-log'
Plug 'maxbrunsfeld/vim-yankstack'

" Syntax highlighting for CSV, since polyglot's is bad
Plug 'mechatroner/rainbow_csv'

" All Plug calls must be executed before this
call plug#end()
" ---------------------------- End Vim-Plug Plugins ------------------------


" Attempt to determine the type of a file based on its name and possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
" Required to tun back on for Vundle stuff to work
filetype plugin indent on

" ---------------------- nvim-cmp ----------------------
lua <<EOF
  -- Set up nvim-cmp.
  local cmp = require'cmp'

  cmp.setup({
    snippet = {
      -- REQUIRED - you must specify a snippet engine
      expand = function(args)
        vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
        -- require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
        -- require('snippy').expand_snippet(args.body) -- For `snippy` users.
        -- vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
        -- vim.snippet.expand(args.body) -- For native neovim snippets (Neovim v0.10+)

        -- For `mini.snippets` users:
        -- local insert = MiniSnippets.config.expand.insert or MiniSnippets.default_insert
        -- insert({ body = args.body }) -- Insert at cursor
        -- cmp.resubscribe({ "TextChangedI", "TextChangedP" })
        -- require("cmp.config").set_onetime({ sources = {} })
      end,
    },
    window = {
      -- completion = cmp.config.window.bordered(),
      -- documentation = cmp.config.window.bordered(),
    },
    mapping = cmp.mapping.preset.insert({
      ['<C-b>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<C-e>'] = cmp.mapping.abort(),
      ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
    }),
    sources = cmp.config.sources({
      { name = 'nvim_lsp' },
      { name = 'vsnip' }, -- For vsnip users.
      -- { name = 'luasnip' }, -- For luasnip users.
      -- { name = 'ultisnips' }, -- For ultisnips users.
      -- { name = 'snippy' }, -- For snippy users.
    }, {
      { name = 'buffer' },
    })
  })

  -- To use git you need to install the plugin petertriho/cmp-git and uncomment lines below
  -- Set configuration for specific filetype.
  --[[ cmp.setup.filetype('gitcommit', {
    sources = cmp.config.sources({
      { name = 'git' },
    }, {
      { name = 'buffer' },
    })
 })
 require("cmp_git").setup() ]]-- 

  -- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline({ '/', '?' }, {
    mapping = cmp.mapping.preset.cmdline(),
    sources = {
      { name = 'buffer' }
    }
  })

  -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline(':', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = cmp.config.sources({
      { name = 'path' }
    }, {
      { name = 'cmdline' }
    }),
    matching = { disallow_symbol_nonprefix_matching = false }
  })

  -- Set up lspconfig.
  local capabilities = require('cmp_nvim_lsp').default_capabilities()
  -- Replace <YOUR_LSP_SERVER> with each lsp server you've enabled.
  require('lspconfig')['<YOUR_LSP_SERVER>'].setup {
    capabilities = capabilities
  }
EOF

" ---------------------- Plasticboy Markdown Plugin ----------------------
" This fancy stuff doens't work as well as I'd like so I get rid of it
let g:vim_markdown_auto_insert_bullets = 0
let g:vim_markdown_new_list_item_indent = 0
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_conceal = 0
let g:vim_markdown_strikethrough = 1


" ---------------------------- yankstack ----------------------------------
let g:yankstack_map_keys = 0
nmap <C-p> <Plug>yankstack_substitute_older_paste
nmap <C-n> <Plug>yankstack_substitute_newer_paste

" ------------------------------ Ansible YAML ----------------------------
" Vim's built-in YAML doesn't handle indentation well, so we need to use the only
" YAML plugin that actually does it right
" Why do all the YAML plugins suck... :(
" au BufRead,BufNewFile *.yml set filetype=ansible
" au BufRead,BufNewFile *.yaml set filetype=ansible
autocmd FileType *.yml setlocal noautoindent
autocmd FileType *.yaml setlocal noautoindent

" ---------------------------- Starlark ----------------------------------
" The only Vim Starlark plugin uses weird coloring, so we set the syntax to
" Python
autocmd FileType *.star setlocal filetype=python

" ---------------------------- Jedi Vim ----------------------------------
let g:jedi#documentation_command = ""
let g:jedi#popup_select_first = 1

" This turns off the annoying 'insert the autocomplete match if there's only one'
" behavior
if v:version >= 705 || (v:version == 704 && has('patch775'))
   set completeopt=menuone,longest,preview,noinsert
endif

" ----------------------------- Airline ----------------------------------
let g:airline_left_sep=''
let g:airline_right_sep=''

" I really only care about percentage through file, so only show me that
let g:airline_section_z = airline#section#create(['%3p%%'])

" ---------------------------- Gitgutter ---------------------------------
nnoremap <Leader>ha :GitGutterStageHunk<CR>

" -------------------------- Color Scheme --------------------------------
" let g:jellybeans_background_color_256 = "000000"
let g:jellybeans_overrides = {
\    'background': { 'guibg': '000000' },
\}

colorscheme jellybeans


" ========================================================================
"                          Setting Options
" ========================================================================
" Allow editing Mac crontab with Vim
" Source: http://superuser.com/questions/359580/error-adding-cronjobs-in-mac-os-x-lion
if $VIM_CRONTAB == "true"
    set nobackup
    set nowritebackup
endif

" Open splits on the right and bottom
set splitright
set splitbelow

" Persistent undo history
set undofile
set undodir=$HOME/.vim-undo
set undolevels=1000
set undoreload=10000

" Enable syntax highlighting
syntax on

" Ignores whitespace when doing vimdiff
set diffopt+=iwhite

" One of the most important options to activate. Allows you to switch from an
" unsaved buffer without saving it first. Also allows you to keep an undo
" history for multiple files. Vim will complain if you try to quit without
" saving, and swap files will keep you safe if your computer crashes.
set hidden

" Note that not everyone likes working this way (with the hidden option).
" Alternatives include using tabs or split windows instead of re-using the same
" window for multiple buffers, and/or:
" set confirm
" set autowriteall

" Better command-line completion
set wildmenu
set wildignore+=*.so,*.swp,*.zip,*.jar

" Show partial commands in the last line of the screen
set showcmd

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch

" Highlight matching parantheses, brackets, braces, etc.
set showmatch

" Modelines have historically been a source of security vulnerabilities. As
" such, it may be a good idea to disable them and use the securemodelines
" script, <http://www.vim.org/scripts/script.php?script_id=1876>.
" set nomodeline

" Set spellcheck for certain files
augroup spellcheck
    autocmd!
    autocmd FileType gitcommit setlocal spell
    autocmd BufNewFile,BufRead *.markdown setlocal spell
    autocmd BufNewFile,BufRead *.md setlocal spell
    autocmd BufNewFile,BufRead *.txt setlocal spell
augroup END

" Highlight current line
set cursorline

" Use case sensitive search, except when searching
set noignorecase
set incsearch
" nnoremap / /\c<Left><Left>
" nnoremap ? ?\c<Left><Left>


" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent

" These stop the cursor from being forced to the left when hitting lines
" shorter than the line we started at
set nostartofline

" Display the cursor position on the last line of the screen or in the status
" line of a window
set ruler

" Always display the status line, even if only one window is displayed
" NOTE: This was disabled due to it not playing nicely with Syntastic
set laststatus=2

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell. If visualbell is set, and
" this line is also included, vim will neither flash nor beep. If visualbell
" is unset, this does nothing.
set t_vb=

" Enable use of the mouse for all modes
"set mouse=a

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Display line numbers on the left
set number

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Lazy redraw, from sensible.vim
set lazyredraw

" Folding options
set foldenable          " Turn on folding
set foldlevelstart=10   " Default show up to 10 levels of folds open on start
set foldnestmax=10      " Don't allow past 10 levels of fold nesting
autocmd FileType *.py setlocal foldmethod=indent   " Automatically fold based on indentation (yay, Python)

" Do not change 'tabstop' from its default value of 8 with this setup.
set shiftwidth=4
set softtabstop=4
set expandtab
autocmd Filetype javascript* setlocal ts=4 sw=4 sts=0
autocmd Filetype yaml setlocal ts=2 sw=2 sts=0

" Indentation settings for using hard tabs for indent. Display tabs as
" two characters wide.
"set shiftwidth=2
"set tabstop=2

" Used for wrapping lines only at words
set wrap
set linebreak

" Try to get Vim to autoreload upon changes
" From https://batsov.com/articles/2025/06/02/how-to-vim-reloading-file-buffers/
set autoread
au FocusGained,BufEnter * :silent! checktime

" Allow flashing cursor to be seen when matching parenthesis
hi MatchParen ctermfg=white

" Keep cursor centered, except when at the top of the file
set scrolloff=999
autocmd CursorMoved * call AdjustScrolloff()
function! AdjustScrolloff()
  if line('.') <= winheight(0) / 2
    setlocal scrolloff=0
  else
    setlocal scrolloff=999
  endif
endfunction



" ========================================================================
"                                Mappings
" ========================================================================
" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <Leader>l :nohl<CR><C-L>

" SYSTEM CLIPBOARD BINDINGS
" Copy current selection to system clipboard
vnoremap + "+y
" Yank the current line
nnoremap ++ "+yy
" Yank the file's contents
nnoremap +% gg0VG"+y''

" Change highlight color on folds to a darker hue
highlight Folded ctermfg=DarkGrey ctermbg=None

" Automatically reload your .vimrc/.gvimrc if something changes
" Doesn't work on all changes (e.g. mappings won't change)
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

" Easy insertion of blank lines
nnoremap ]<Space> o<Esc>
nnoremap [<Space> O<Esc>

" Joins the current line to the previous one with a space
nnoremap <^ ^d0i<BS><Space><Esc>

" Splits everything after the cursor into a new line
nnoremap >v i<Return><Esc>

" Have movement commands operate linewise
nnoremap j gj
nnoremap k gk
nnoremap ^ g^
nnoremap $ g$
vnoremap j gj
vnoremap k gk

" Map <S-j> and <S-k> to PageDown and PageUp respectively
nnoremap J 20jzz
nnoremap K 20kzz
vnoremap J 20jzz
vnoremap K 20kzz

" Easily flip paste mode toggle
nnoremap <Leader>p :set invpaste paste?<CR>

" Screen-centering mappings
nnoremap n nzz
nnoremap N Nzz

" Easy way to echo a line for Bash debugging
nnoremap <Leader>db V:s/"/\\"/g<CR>^iecho "<ESC>$a"<ESC>

" Easy opening of splits
nnoremap <Leader>v :vsp 
nnoremap <Leader>s :sp 
nnoremap <Leader>e :e 

" NOTE: These are cool, but I really shouldn't get used to them for cross-box
" muscle memory... but I love them
" Easy mapping for writing and quitting files
nnoremap <Leader>w :w<CR>
nnoremap <Leader>W :wa<CR>
noremap <Leader>q :q<CR>
noremap <Leader>Q :qa<CR>
nnoremap <Leader>x :wq<CR>
nnoremap <Leader>X :wa<CR>:qa<CR>

" Allows easy rendering of Markdown files in Chrome when combined with this
" Markdown viewing Chrome extension:
"  https://chromewebstore.google.com/detail/markdown-viewer/ckkdlimhmcjmikdlpkmbgfkaikojcbjk
nnoremap <Leader>c :! open -a 'Google Chrome' "%"<CR><CR>

" This is maybe more valuable as something else
nnoremap <Leader>? :help<CR>

" ---------------------- Markdown file editing-----------------------------
" Very useful shortcut to make a Markdown headers out of given line
nnoremap <Leader>h= "hyy"hpVr=
nnoremap <Leader>h- "hyy"hpVr-
nnoremap <Leader>h# :s/^/### /<CR>:nohl<CR>
" -------------------------------------------------------------------------

nnoremap <Leader>gl :Shell git log --graph --abbrev-commit --decorate --date=relative --format=format:'\%h - (\%ar) \%s [\%an]\%d' --all<CR>

" I often accidentally type :W instead of :w and Vim yells at me. This stops
" that annoying behaviour
command! W w


" ========================================================================
"                            Custom Functions
" ========================================================================
" Nifty command to open the output of a command in a scratch buffer
" Source: http://vim.wikia.com/wiki/Display_output_of_shell_commands_in_new_window
command! -complete=shellcmd -nargs=+ Shell call s:RunShellCommand(<q-args>)
function! s:RunShellCommand(cmdline)
    echo a:cmdline
    let expanded_cmdline = a:cmdline
    for part in split(a:cmdline, ' ')
        if part[0] =~ '\v[%#<]'
            let expanded_part = fnameescape(expand(part))
            let expanded_cmdline = substitute(expanded_cmdline, part, expanded_part, '')
        endif
    endfor
    botright new
    setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
    call setline(1, 'You entered:    ' . a:cmdline)
    call setline(2, 'Expanded Form:  ' .expanded_cmdline)
    call setline(3,substitute(getline(2),'.','=','g'))
    execute '$read !'. expanded_cmdline
    setlocal nomodifiable
    1
endfunction

" Easy JSON prettifier
if !exists(":PrettifyJson")
    :command PrettifyJson %!python3 -m json.tool
endif

function! DoPrettifyXML()
  " save the filetype so we can restore it later
  let l:origft = &ft
  set ft=
  " delete the xml header if it exists. This will
  " permit us to surround the document with fake tags
  " without creating invalid xml.
  1s/<?xml .*?>//e
  " insert fake tags around the entire document.
  " This will permit us to pretty-format excerpts of
  " XML that may contain multiple top-level elements.
  0put ='<PrettyXML>'
  $put ='</PrettyXML>'
  silent %!xmllint --format -
  " xmllint will insert an <?xml?> header. it's easy enough to delete
  " if you don't want it.
  " delete the fake tags
  2d
  $d
  " restore the 'normal' indentation, which is one extra level
  " too deep due to the extra tags we wrapped around the document.
  silent %<
  " back to home
  1
  " restore the filetype
  exe "set ft=" . l:origft
endfunction
command! PrettifyXML call DoPrettifyXML()




" ========================================================================
"                                Mappings
" ========================================================================
" Merge two blocks of lines: https://stackoverflow.com/questions/10760326/merge-multiple-lines-two-blocks-in-vim
" 1) Select first block of lines you want to merge and yank them to a register
" 2) :let l=split(@THEREGISTER) 
" 3) Select second block of lines
" 4) :'<,'>s/SOMESELECTOR/\=remove(l,0)/
