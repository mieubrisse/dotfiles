" ------- VUNDLE ------
" Set 'nocompatible' to ward off unexpected things that your distro might
" have made, as well as sanely reset options when re-sourcing .vimrc
" This is also required for Vundle
set nocompatible

" Required for Vundle install
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/vundle/Vundle.vim
call vundle#begin('~/.vundle')
" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/some/path/here')

" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
" Plugin 'Valloric/YouCompleteMe'
Plugin 'nanotech/jellybeans.vim'
Plugin 'vim-scripts/groovy.vim'
Plugin 'tfnico/vim-gradle'
Plugin 'kien/ctrlp.vim'
" Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'tomtom/tcomment_vim'
Plugin 'davidhalter/jedi-vim'
Plugin 'ervandew/supertab'
Plugin 'leafgarland/typescript-vim'

" All the Vim YAML plugins are miserable...
" Plugin 'avakhov/vim-yaml'
" Plugin 'chase/vim-ansible-yaml'

" Plugin 'tomtom/tlib_vim'
" Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'kchmck/vim-coffee-script'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'pangloss/vim-javascript'
Plugin 'elzr/vim-json'
Plugin 'groenewege/vim-less'
Plugin 'kshenoy/vim-signature'
Plugin 'tpope/vim-markdown'
" Plugin 'derekwyatt/vim-scala'
" Plugin 'garbas/vim-snipmate'
" Plugin 'honza/vim-snippets'
" Plugin 'tristen/vim-sparkup'
Plugin 'tpope/vim-surround'
Plugin 'sukima/xmledit'
Plugin 'airblade/vim-gitgutter'
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'fatih/vim-go'
Plugin 'vim-airline/vim-airline'
Plugin 'tpope/vim-fugitive'


" All of your Plugins must be added before the following line
call vundle#end()            " required

" Attempt to determine the type of a file based on its name and possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
" Required to tun back on for Vundle stuff to work
filetype plugin indent on
" ---------------------

" ------ Ansible YAML --------
" Vim's built-in YAML doesn't handle indentation well, so we need to use the only
" YAML plugin that actually does it right
" Why do all the YAML plugins suck... :(
" au BufRead,BufNewFile *.yml set filetype=ansible
" au BufRead,BufNewFile *.yaml set filetype=ansible
autocmd FileType *.yml setlocal noautoindent
autocmd FileType *.yaml setlocal noautoindent
" ----------------------------

" ------ Jedi Vim -------
" Switch Jedi-Vim Pydoc lookup to Ctrl+K
let g:jedi#documentation_command = "<C-K>"
let g:jedi#popup_select_first = 1

" This turns off the annoying 'insert the autocomplete match if there's only one'
" behavior
if v:version >= 705 || (v:version == 704 && has('patch775'))
    set completeopt=menuone,longest,preview,noinsert
endif
" -----------------------

" ------ Syntastic -------
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_loc_list_height=3
" ------------------------

" ------ Airline -------
let g:airline_left_sep=''
let g:airline_right_sep=''

" I really only care about percentage through file, so only show me that
let g:airline_section_z = airline#section#create(['%3p%%'])

" ------------------------

" ------ Fugitive -------
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>ga :Git add %:p<CR><CR>
nnoremap <Leader>gcm :Gcommit -v -q<CR>
" Dunno what this one does so leaving it out for now
" nnoremap <Leader>gt :Gcommit -v -q %:p<CR>
nnoremap <Leader>gdd :Gdiff<CR>
nnoremap <Leader>ge :Gedit<CR>
nnoremap <Leader>gr :Gread<CR>
nnoremap <Leader>gw :Gwrite<CR><CR>
nnoremap <Leader>gl :silent! Glog<CR>:bot copen<CR>
nnoremap <Leader>gp :Ggrep<Space>
nnoremap <Leader>gm :Gmove<Space>
nnoremap <Leader>gb :Git branch<Space>
nnoremap <Leader>go :Git checkout<Space>
nnoremap <Leader>gps :Dispatch! git push<CR>
nnoremap <Leader>gpl :Dispatch! git pull<CR>

command! GDiffCached :Git! diff --cached
nnoremap <Leader>gdc :GDiffCached<cr>
" ------------------------

" ------ SuperTab -------
" Use Vim's omnicomplete for SuperTab
let g:SuperTabDefaultCompletionType = "<C-x><C-o>"
" -----------------------

" ---------- Gitgutter ----------
nnoremap <Leader>ha :GitGutterStageHunk<CR>
" -------------------------------

" ------ NERDTree -------
" Close NERDTree when opening a file
let NERDTreeQuitOnOpen = 1
" -----------------------

" ------ Ctrl P ------
let g:ctrlp_working_path_mode = 'ra'

" We want cross-session caching for those big projects
let g:ctrlp_clear_cache_on_exit = 0
" --------------------

" ------ Jellybeans Color Scheme ------
colorscheme jellybeans
let g:jellybeans_background_color_256 = "000000"
" --------------------

" ------ netrw --------------------
" Set line numbers in netrw file explorer
let g:netrw_bufsettings = 'noma nomod nu nobl nowrap ro'
" ---------------------------------

" Allow editing Mac crontab with Vim
" Source: http://superuser.com/questions/359580/error-adding-cronjobs-in-mac-os-x-lion
if $VIM_CRONTAB == "true"
    set nobackup
    set nowritebackup
endif

" Open splits on the right and bottom
set splitright
set splitbelow

" Persistent undo history
set undofile
set undodir=$HOME/.vim-undo
set undolevels=1000
set undoreload=10000

" URL: http://vim.wikia.com/wiki/Example_vimrc
" Authors: http://vim.wikia.com/wiki/Vim_on_Freenode
" Description: A minimal, but feature rich, example .vimrc. If you are a
"              newbie, basing your first .vimrc on this file is a good choice.
"              If you're a more advanced user, building your own .vimrc based
"              on this file is still a good idea.

"------------------------------------------------------------
" Features {{{1
"
" These options and commands enable some very useful features in Vim, that
" no user should have to live without.

" Enable syntax highlighting
syntax on


"------------------------------------------------------------
" Must have options {{{1
"
" These are highly recommended options.

" One of the most important options to activate. Allows you to switch from an
" unsaved buffer without saving it first. Also allows you to keep an undo
" history for multiple files. Vim will complain if you try to quit without
" saving, and swap files will keep you safe if your computer crashes.
set hidden

" Note that not everyone likes working this way (with the hidden option).
" Alternatives include using tabs or split windows instead of re-using the same
" window for multiple buffers, and/or:
" set confirm
" set autowriteall

" Better command-line completion
set wildmenu
set wildignore+=*.so,*.swp,*.zip,*.jar

" Show partial commands in the last line of the screen
set showcmd

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch

" Highlight matching parantheses, brackets, braces, etc.
set showmatch

" Modelines have historically been a source of security vulnerabilities. As
" such, it may be a good idea to disable them and use the securemodelines
" script, <http://www.vim.org/scripts/script.php?script_id=1876>.
" set nomodeline

"------------------------------------------------------------
" Usability options {{{1

" TODO Turning Vim file views off for now, because they cause a lot of tricksy behavior
" Restore folds when file is reloaded
" http://vim.wikia.com/wiki/Make_views_automatic
" set viewdir=~/.vim-views
" augroup views
"     autocmd!
"     autocmd BufWinLeave *.* mkview!
"     autocmd BufWinEnter *.* silent loadview
" augroup END

" Set spellcheck for certain files
augroup spellcheck
    autocmd!
    autocmd FileType gitcommit setlocal spell
    autocmd BufNewFile,BufRead *.markdown setlocal spell
    autocmd BufNewFile,BufRead *.md setlocal spell
    autocmd BufNewFile,BufRead *.txt setlocal spell
augroup END

" Highlight current line
set cursorline

" Use case sensitive search, except when searching
set noignorecase
set incsearch
nnoremap / /\c<Left><Left>
nnoremap ? ?\c<Left><Left>


" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Display the cursor position on the last line of the screen or in the status
" line of a window
set ruler

" Always display the status line, even if only one window is displayed
" NOTE: This was disabled due to it not playing nicely with Syntastic
set laststatus=2

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell. If visualbell is set, and
" this line is also included, vim will neither flash nor beep. If visualbell
" is unset, this does nothing.
set t_vb=

" Enable use of the mouse for all modes
"set mouse=a

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Display line numbers on the left
set number

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Lazy redraw, from sensible.vim
set lazyredraw

" Use <F11> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F11>

" Folding options
set foldenable          " Turn on folding
set foldlevelstart=10   " Default show up to 10 levels of folds open on start
set foldnestmax=10      " Don't allow past 10 levels of fold nesting
autocmd FileType *.py setlocal foldmethod=indent   " Automatically fold based on indentation (yay, Python)

"------------------------------------------------------------
" Indentation options {{{1
"
" Indentation settings according to personal preference.

" Indentation settings for using 2 spaces instead of tabs.
" Do not change 'tabstop' from its default value of 8 with this setup.
set shiftwidth=4
set softtabstop=4
set expandtab

" Indentation settings for using hard tabs for indent. Display tabs as
" two characters wide.
"set shiftwidth=2
"set tabstop=2

" Used for wrapping lines only at words
set wrap
set linebreak

"------------------------------------------------------------
" Mappings {{{1
"
" Useful mappings

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <Leader>l :nohl<CR><C-L>

" Map backtick to switch buffers quickly = MAY NOT NEED THIS
" nnoremap ` <C-^>

" Allow flashing cursor to be seen when matching parenthesis
hi MatchParen ctermfg=white

" NOTE: I hardly ever use these, so they shouldn't take something as valuable
" as the arrow keys
" Rebind arrow keys to make resizing windows easier
" nnoremap <Up> <C-W>+
" nnoremap <Down> <C-W>-
" nnoremap <Left> <C-W><
" nnoremap <Right> <C-W>>

" SYSTEM CLIPBOARD BINDINGS
" Copy current selection to system clipboard
vnoremap + "+y
" Yank the current line
nnoremap ++ "+yy
" Yank the file's contents
nnoremap +% gg0VG"+y''

" Change highlight color on folds to a darker hue
highlight Folded ctermfg=DarkGrey ctermbg=None

" Automatically reload your .vimrc/.gvimrc if something changes
" Doesn't work on all changes (e.g. mappings won't change)
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

" Easy insertion of blank lines
nnoremap ]<Space> o<Esc>
nnoremap [<Space> O<Esc>

" Joins the current line to the previous one with a space
nnoremap <^ ^d0i<BS><Space><Esc>

" Splits everything after the cursor into a new line
nnoremap >v i<Return><Esc>

" Have movement commands operate linewise
nnoremap j gj
nnoremap k gk
nnoremap ^ g^
nnoremap $ g$
vnoremap j gj
vnoremap k gk

" Map <S-j> and <S-k> to PageDown and PageUp respectively
noremap <S-J> <C-F>zz
noremap <S-K> <C-B>zz

" Easily flip paste mode toggle
nnoremap <Leader>p :set invpaste paste?<CR>

" Screen-centering mappings
" TODO Maybe space should/could actually be a second type of leader character...
nnoremap <Space> zz
nnoremap n nzz
nnoremap N Nzz

"------------------------------------------------------------
" Easy JSON prettifier
if !exists(":PrettifyJson")
    :command PrettifyJson %!python -m json.tool
endif

function! DoPrettifyXML()
  " save the filetype so we can restore it later
  let l:origft = &ft
  set ft=
  " delete the xml header if it exists. This will
  " permit us to surround the document with fake tags
  " without creating invalid xml.
  1s/<?xml .*?>//e
  " insert fake tags around the entire document.
  " This will permit us to pretty-format excerpts of
  " XML that may contain multiple top-level elements.
  0put ='<PrettyXML>'
  $put ='</PrettyXML>'
  silent %!xmllint --format -
  " xmllint will insert an <?xml?> header. it's easy enough to delete
  " if you don't want it.
  " delete the fake tags
  2d
  $d
  " restore the 'normal' indentation, which is one extra level
  " too deep due to the extra tags we wrapped around the document.
  silent %<
  " back to home
  1
  " restore the filetype
  exe "set ft=" . l:origft
endfunction
command! PrettifyXML call DoPrettifyXML()

" This gives us a CAPSLOCK that turns itself off during insert mode, but it
" can't be used during Ex commands so it's not very useful...
" Insert and command-line mode Caps Lock.
" " Lock search keymap to be the same as insert mode.
" set imsearch=-1
"
" " Load the keymap that acts like capslock.
" set keymap=insert-capslock
"
" inoremap <C-u> <C-^>
" " Turn it off by default.
" set iminsert=0
" " Kill the capslock when leaving insert mode.
" autocmd InsertLeave * set iminsert=0

" Better buffer nav
nnoremap <Leader>b :b#

" Better split navigation
nnoremap <C-y> <C-w>h
nnoremap <C-i> <C-w>k
nnoremap <C-u> <C-w>j
nnoremap <C-o> <C-w>l
nnoremap <Left> <C-w>h
nnoremap <Right> <C-w>l
nnoremap <Down> <C-w>j
nnoremap <Up> <C-w>k
nnoremap <Leader>x <C-w>q

" Better tab navigation
nnoremap <Leader>tt :tabnew<CR>
nnoremap <Leader>tn :tabn<CR>
nnoremap <Leader>tp :tabp<CR>
nnoremap <Leader>te :tabedit <CR>
nnoremap <Leader>tq :tabclose<CR>
nnoremap <Leader>tx :tabclose<CR>

" Easy way to echo a line for Bash debugging
nnoremap <Leader>db V:s/"/\\"/g<CR>^iecho "<ESC>$a"<ESC>

" TODO Figure out how to make Syntastic shut up about the trailing spaces
" Easy opening of splits
nnoremap <Leader>v :vsp 
nnoremap <Leader>s :sp 
nnoremap <Leader>e :e 

" NOTE: These are cool, but I really shouldn't get used to them for cross-box
" muscle memory... but I love them
" Easy mapping for writing and quitting files
nnoremap <Leader>w :w<CR>
noremap <Leader>q :q<CR>
noremap <C-d> :q<CR>
nnoremap <Leader>x :wq<CR>

" NOTE: I probably don't really want to get used to these
" Operators for easy operation on parantheses and quotes
" onoremap p i(
" onoremap q i"

" Python conveniences
" TODO This doesn't work (<leader>p does something but I don't know what)
vnoremap <Leader>pa :s/_\(\w\+)_ARGVAR/& = "\L\1"/g<CR>
